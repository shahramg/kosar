package com.mitrallc.sqltrig;

import java.sql.Connection;
import java.sql.DriverManager;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Set;
import java.util.Vector;

import com.mitrallc.sql.KosarSoloDriver;

/*
 * Author:  Shahram Ghandeharizadeh
 * Date:  Aug 16, 2011
 * Methods of this class transform a vector of triggers into a smaller 
 * subset by merging the body of those vectors that reference the same 
 * table for a given operation, e.g., table user_cameras where the operation
 * is update/insert/delete.
 */

public class OracleOptimizeTriggers {
	static OracleTrigGenerator otg = null;
	static boolean verbose = false;

	static String[] sampleqrys = {
		"CREATE OR REPLACE TRIGGER  FRIENDSHIP10191019699U BEFORE UPDATE ON FRIENDSHIP FOR EACH ROW DECLARE DELETEIT_DLL_VAL BINARY_INTEGER; KEYTODELETE  CLOB;  DELETEKEY CLOB; BEGIN DELETEKEY := ' '; KEYTODELETE := ' ';  IF (:OLD.INVITEEID <> :NEW.INVITEEID OR :OLD.INVITERID <> :NEW.INVITERID OR :OLD.status <> :NEW.status) THEN  KEYTODELETE := CONCAT('_IIB2',CONCAT(:OLD.inviterID, :OLD.status)); DELETEKEY := CONCAT(DELETEKEY, CONCAT(' ', KEYTODELETE)); KEYTODELETE := CONCAT('_IIB2',CONCAT(:NEW.inviterID, :NEW.status)); DELETEKEY := CONCAT(DELETEKEY, CONCAT(' ', KEYTODELETE)); KEYTODELETE := CONCAT('_IIB2',CONCAT(:OLD.inviteeID, :OLD.status)); DELETEKEY := CONCAT(DELETEKEY, CONCAT(' ', KEYTODELETE)); KEYTODELETE := CONCAT('_IIB2',CONCAT(:NEW.inviteeID, :NEW.status)); DELETEKEY := CONCAT(DELETEKEY, CONCAT(' ', KEYTODELETE)); END IF; IF (DELETEKEY != ' ') THEN  DeleteIT_DLL_Val := KOSARTriggerDeleteMultiCall('', 'RAYS', DELETEKEY, 0); IF (DeleteIT_DLL_Val != 0) THEN RAISE_APPLICATION_ERROR( -20001, CONCAT(DeleteIT_DLL_Val,'Failed to connect to KOSAR KVS CORE.')); END IF; END IF; END;",
		"CREATE OR REPLACE TRIGGER  FRIENDSHIP1019109699U BEFORE UPDATE ON FRIENDSHIP FOR EACH ROW DECLARE DeleteIT_DLL_Val BINARY_INTEGER; KEYTODELETE  CLOB;  DELETEKEY CLOB; BEGIN DELETEKEY := ' '; KEYTODELETE := ' ';  IF (:OLD.INVITEEID <> :NEW.INVITEEID OR :OLD.INVITERID <> :NEW.INVITERID OR :OLD.status <> :NEW.status) THEN   KEYTODELETE := CONCAT('_IIB2',CONCAT(:OLD.inviteeID, :OLD.status)); DELETEKEY := CONCAT(DELETEKEY, CONCAT(' ', KEYTODELETE)); KEYTODELETE := CONCAT('_IIB2',CONCAT(:NEW.inviteeID, :NEW.status)); DELETEKEY := CONCAT(DELETEKEY, CONCAT(' ', KEYTODELETE)); END IF; IF (DELETEKEY != ' ') THEN  DeleteIT_DLL_Val := KOSARTriggerDeleteMultiCall('', 'RAYS', DELETEKEY, 0); IF (DeleteIT_DLL_Val != 0) THEN RAISE_APPLICATION_ERROR( -20001, CONCAT(DeleteIT_DLL_Val,'Failed to connect to KOSAR KVS CORE.')); END IF; END IF; END;"
	};

	static String[] a1sampleqrys = {
		"CREATE OR REPLACE TRIGGER  Udept003453 BEFORE UPDATE ON dept FOR EACH ROW DECLARE DeleteIT_DLL_Val BINARY_INTEGER; KeyToDelete  CLOB; /* DeleteKey CLOB; */ BEGIN KeyToDelete := ' ';  IF (:OLD.DNO <> :NEW.DNO OR :OLD.DNAME <> :NEW.DNAME) THEN  KeyToDelete := CONCAT('_3',:OLD.DNAME); DeleteIT_DLL_Val := KOSARTriggerDeleteCall('RAYS', KeyToDelete, 0); END IF; END;",
		"CREATE OR REPLACE TRIGGER  Ddept003453 BEFORE DELETE ON dept FOR EACH ROW DECLARE DeleteIT_DLL_Val BINARY_INTEGER; KeyToDelete  CLOB; /* DeleteKey CLOB; */ BEGIN KeyToDelete := ' ';  KeyToDelete := CONCAT('_3',:OLD.DNAME);DeleteIT_DLL_Val := KOSARTriggerDeleteCall('RAYS', KeyToDelete, 0); END;",
		"CREATE OR REPLACE TRIGGER  Idept003453 BEFORE INSERT ON dept FOR EACH ROW DECLARE DeleteIT_DLL_Val BINARY_INTEGER; KeyToDelete  CLOB; /* DeleteKey CLOB; */ BEGIN KeyToDelete := ' ';  KeyToDelete := CONCAT('_3',:NEW.DNAME); DeleteIT_DLL_Val := KOSARTriggerDeleteCall('RAYS', KeyToDelete, 0); END;",
		"CREATE OR REPLACE TRIGGER  Ddept BEFORE DELETE ON dept FOR EACH ROW DECLARE KEYTODELETE CLOB; DeleteIT_DLL_Val BINARY_INTEGER; /* DeleteKey CLOB; */ BEGIN  KEYTODELETE := CONCAT('dept', KEYTODELETE); DeleteIT_DLL_Val := KOSARTriggerDeleteCall('RAYS', KeyToDelete, 0); END; ",
		"CREATE OR REPLACE TRIGGER  Ddept BEFORE DELETE ON dept FOR EACH ROW DECLARE KEYTODELETE CLOB; DeleteIT_DLL_Val BINARY_INTEGER; /* DeleteKey CLOB; */ BEGIN  KEYTODELETE := CONCAT('dept', KEYTODELETE); DeleteIT_DLL_Val := KOSARTriggerDeleteCall('RAYS', KeyToDelete, 0); END; ",
		"CREATE OR REPLACE TRIGGER  Idept BEFORE INSERT ON dept FOR EACH ROW DECLARE KEYTODELETE CLOB; DeleteIT_DLL_Val BINARY_INTEGER; /* DeleteKey CLOB; */ BEGIN  KEYTODELETE := CONCAT('dept', KEYTODELETE); DeleteIT_DLL_Val := KOSARTriggerDeleteCall('RAYS', KeyToDelete, 0); END; "
	};
	static String[] oldaa = {
		"CREATE OR REPLACE TRIGGER  Uusers0060575845 BEFORE UPDATE ON users FOR EACH ROW DECLARE DeleteIT_DLL_Val BINARY_INTEGER; KeyToDelete  CLOB; /* DeleteKey CLOB; */ BEGIN KeyToDelete := ' ';  IF (:OLD.uname <> :NEW.uname OR :OLD.username <> :NEW.username OR :OLD.city <> :NEW.city OR :OLD.state <> :NEW.state OR :OLD.country <> :NEW.country OR :OLD.joindate <> :NEW.joindate OR :OLD.lastdate <> :NEW.lastdate OR :OLD.USER_ID <> :NEW.USER_ID) THEN  KeyToDelete := CONCAT('_5845788',:OLD.USER_ID); DeleteIT_DLL_Val := KOSARTriggerDeleteCall('RAYS', KeyToDelete, 0); END IF; END;",
		"CREATE OR REPLACE TRIGGER  Dusers0060575845 BEFORE DELETE ON users FOR EACH ROW DECLARE DeleteIT_DLL_Val BINARY_INTEGER; KeyToDelete  CLOB; /* DeleteKey CLOB; */ BEGIN KeyToDelete := ' ';  KeyToDelete := CONCAT('_5845788',:OLD.USER_ID);DeleteIT_DLL_Val := KOSARTriggerDeleteCall('RAYS', KeyToDelete, 0); END;",
		"CREATE OR REPLACE TRIGGER  Iusers0060575845 BEFORE INSERT ON users FOR EACH ROW DECLARE DeleteIT_DLL_Val BINARY_INTEGER; KeyToDelete  CLOB; /* DeleteKey CLOB; */ BEGIN KeyToDelete := ' ';  KeyToDelete := CONCAT('_5845788',:NEW.USER_ID); DeleteIT_DLL_Val := KOSARTriggerDeleteCall('RAYS', KeyToDelete, 0); END;",
		"CREATE OR REPLACE TRIGGER  Ufriends1067666 BEFORE UPDATE ON friends FOR EACH ROW DECLARE DeleteIT_DLL_Val BINARY_INTEGER; KeyToDelete  CLOB; /* DeleteKey CLOB; */ BEGIN KeyToDelete := ' ';  IF (:OLD.userid <> :NEW.userid OR :OLD.STATUS <> :NEW.STATUS) THEN  KeyToDelete := CONCAT('_6',CONCAT(:OLD.STATUS, :OLD.USERID)); DeleteIT_DLL_Val := KOSARTriggerDeleteCall('RAYS', KeyToDelete, 0); END IF; END;",
		"CREATE OR REPLACE TRIGGER  Dfriends1067666 BEFORE DELETE ON friends FOR EACH ROW DECLARE DeleteIT_DLL_Val BINARY_INTEGER; KeyToDelete  CLOB; /* DeleteKey CLOB; */ BEGIN KeyToDelete := ' ';  KeyToDelete := CONCAT('_6',CONCAT(:OLD.STATUS, :OLD.USERID));DeleteIT_DLL_Val := KOSARTriggerDeleteCall('RAYS', KeyToDelete, 0); END;",
		"CREATE OR REPLACE TRIGGER  Ifriends1067666 BEFORE INSERT ON friends FOR EACH ROW DECLARE DeleteIT_DLL_Val BINARY_INTEGER; KeyToDelete  CLOB; /* DeleteKey CLOB; */ BEGIN KeyToDelete := ' ';  KeyToDelete := CONCAT('_6',CONCAT(:NEW.STATUS, :NEW.USERID)); DeleteIT_DLL_Val := KOSARTriggerDeleteCall('RAYS', KeyToDelete, 0); END;",
		"CREATE OR REPLACE TRIGGER  Ufriends1067866 BEFORE UPDATE ON friends FOR EACH ROW DECLARE DeleteIT_DLL_Val BINARY_INTEGER; KeyToDelete  CLOB; /* DeleteKey CLOB; */ BEGIN KeyToDelete := ' ';  IF (:OLD.userid <> :NEW.userid OR :OLD.FRIENDID <> :NEW.FRIENDID OR :OLD.STATUS <> :NEW.STATUS) THEN  KeyToDelete := CONCAT('_6',CONCAT(:OLD.FRIENDID, :OLD.STATUS)); DeleteIT_DLL_Val := KOSARTriggerDeleteCall('RAYS', KeyToDelete, 0); END IF; END;",
		"CREATE OR REPLACE TRIGGER  Dfriends1067866 BEFORE DELETE ON friends FOR EACH ROW DECLARE DeleteIT_DLL_Val BINARY_INTEGER; KeyToDelete  CLOB; /* DeleteKey CLOB; */ BEGIN KeyToDelete := ' ';  KeyToDelete := CONCAT('_6',CONCAT(:OLD.FRIENDID, :OLD.STATUS));DeleteIT_DLL_Val := KOSARTriggerDeleteCall('RAYS', KeyToDelete, 0); END;",
		"CREATE OR REPLACE TRIGGER  Ifriends1067866 BEFORE INSERT ON friends FOR EACH ROW DECLARE DeleteIT_DLL_Val BINARY_INTEGER; KeyToDelete  CLOB; /* DeleteKey CLOB; */ BEGIN KeyToDelete := ' ';  KeyToDelete := CONCAT('_6',CONCAT(:NEW.FRIENDID, :NEW.STATUS)); DeleteIT_DLL_Val := KOSARTriggerDeleteCall('RAYS', KeyToDelete, 0); END;",
		"CREATE OR REPLACE TRIGGER  Umessageinbox2081298158 BEFORE UPDATE ON messageinbox FOR EACH ROW DECLARE DeleteIT_DLL_Val BINARY_INTEGER; KeyToDelete  CLOB; /* DeleteKey CLOB; */ BEGIN KeyToDelete := ' ';  IF (:OLD.receiver <> :NEW.receiver OR :OLD.READ_FLAG <> :NEW.READ_FLAG OR :OLD.RECEIVERDELETED <> :NEW.RECEIVERDELETED) THEN  KeyToDelete := CONCAT('_8',CONCAT(:OLD.READ_FLAG, CONCAT(:OLD.RECEIVER, :OLD.RECEIVERDELETED))); DeleteIT_DLL_Val := KOSARTriggerDeleteCall('RAYS', KeyToDelete, 0); END IF; END;",
		"CREATE OR REPLACE TRIGGER  Dmessageinbox2081298158 BEFORE DELETE ON messageinbox FOR EACH ROW DECLARE DeleteIT_DLL_Val BINARY_INTEGER; KeyToDelete  CLOB; /* DeleteKey CLOB; */ BEGIN KeyToDelete := ' ';  KeyToDelete := CONCAT('_8',CONCAT(:OLD.READ_FLAG, CONCAT(:OLD.RECEIVER, :OLD.RECEIVERDELETED)));DeleteIT_DLL_Val := KOSARTriggerDeleteCall('RAYS', KeyToDelete, 0); END;",
		"CREATE OR REPLACE TRIGGER  Imessageinbox2081298158 BEFORE INSERT ON messageinbox FOR EACH ROW DECLARE DeleteIT_DLL_Val BINARY_INTEGER; KeyToDelete  CLOB; /* DeleteKey CLOB; */ BEGIN KeyToDelete := ' ';  KeyToDelete := CONCAT('_8',CONCAT(:NEW.READ_FLAG, CONCAT(:NEW.RECEIVER, :NEW.RECEIVERDELETED))); DeleteIT_DLL_Val := KOSARTriggerDeleteCall('RAYS', KeyToDelete, 0); END;",
		"CREATE OR REPLACE TRIGGER  Ufriends1067866 BEFORE UPDATE ON friends FOR EACH ROW DECLARE DeleteIT_DLL_Val BINARY_INTEGER; KeyToDelete  CLOB; /* DeleteKey CLOB; */ BEGIN KeyToDelete := ' ';  IF (:OLD.userid <> :NEW.userid OR :OLD.FRIENDID <> :NEW.FRIENDID OR :OLD.STATUS <> :NEW.STATUS) THEN  KeyToDelete := CONCAT('_6',CONCAT(:OLD.FRIENDID, :OLD.STATUS)); DeleteIT_DLL_Val := KOSARTriggerDeleteCall('RAYS', KeyToDelete, 0); END IF; END;",
		"CREATE OR REPLACE TRIGGER  Dfriends1067866 BEFORE DELETE ON friends FOR EACH ROW DECLARE DeleteIT_DLL_Val BINARY_INTEGER; KeyToDelete  CLOB; /* DeleteKey CLOB; */ BEGIN KeyToDelete := ' ';  KeyToDelete := CONCAT('_6',CONCAT(:OLD.FRIENDID, :OLD.STATUS));DeleteIT_DLL_Val := KOSARTriggerDeleteCall('RAYS', KeyToDelete, 0); END;",
		"CREATE OR REPLACE TRIGGER  Ifriends1067866 BEFORE INSERT ON friends FOR EACH ROW DECLARE DeleteIT_DLL_Val BINARY_INTEGER; KeyToDelete  CLOB; /* DeleteKey CLOB; */ BEGIN KeyToDelete := ' ';  KeyToDelete := CONCAT('_6',CONCAT(:NEW.FRIENDID, :NEW.STATUS)); DeleteIT_DLL_Val := KOSARTriggerDeleteCall('RAYS', KeyToDelete, 0); END;",
		"CREATE OR REPLACE TRIGGER  Ufriends1067666 BEFORE UPDATE ON friends FOR EACH ROW DECLARE DeleteIT_DLL_Val BINARY_INTEGER; KeyToDelete  CLOB; /* DeleteKey CLOB; */ BEGIN KeyToDelete := ' ';  IF (:OLD.userid <> :NEW.userid OR :OLD.STATUS <> :NEW.STATUS) THEN  KeyToDelete := CONCAT('_6',CONCAT(:OLD.STATUS, :OLD.USERID)); DeleteIT_DLL_Val := KOSARTriggerDeleteCall('RAYS', KeyToDelete, 0); END IF; END;",
		"CREATE OR REPLACE TRIGGER  Dfriends1067666 BEFORE DELETE ON friends FOR EACH ROW DECLARE DeleteIT_DLL_Val BINARY_INTEGER; KeyToDelete  CLOB; /* DeleteKey CLOB; */ BEGIN KeyToDelete := ' ';  KeyToDelete := CONCAT('_6',CONCAT(:OLD.STATUS, :OLD.USERID));DeleteIT_DLL_Val := KOSARTriggerDeleteCall('RAYS', KeyToDelete, 0); END;",
		"CREATE OR REPLACE TRIGGER  Ifriends1067666 BEFORE INSERT ON friends FOR EACH ROW DECLARE DeleteIT_DLL_Val BINARY_INTEGER; KeyToDelete  CLOB; /* DeleteKey CLOB; */ BEGIN KeyToDelete := ' ';  KeyToDelete := CONCAT('_6',CONCAT(:NEW.STATUS, :NEW.USERID)); DeleteIT_DLL_Val := KOSARTriggerDeleteCall('RAYS', KeyToDelete, 0); END;",
		"CREATE OR REPLACE TRIGGER  Uuser_updates2071281097 BEFORE UPDATE ON user_updates FOR EACH ROW DECLARE DeleteIT_DLL_Val BINARY_INTEGER; KeyToDelete  CLOB; /* DeleteKey CLOB; */ BEGIN KeyToDelete := ' ';  IF (:OLD.user_id <> :NEW.user_id OR :OLD.ACCEPTED <> :NEW.ACCEPTED OR :OLD.EXPDELETER <> :NEW.EXPDELETER OR :OLD.FRIEND_ID <> :NEW.FRIEND_ID) THEN  KeyToDelete := CONCAT('_7',CONCAT(:OLD.ACCEPTED, CONCAT(:OLD.EXPDELETER, :OLD.FRIEND_ID))); DeleteIT_DLL_Val := KOSARTriggerDeleteCall('RAYS', KeyToDelete, 0); END IF; END;",
		"CREATE OR REPLACE TRIGGER  Duser_updates2071281097 BEFORE DELETE ON user_updates FOR EACH ROW DECLARE DeleteIT_DLL_Val BINARY_INTEGER; KeyToDelete  CLOB; /* DeleteKey CLOB; */ BEGIN KeyToDelete := ' ';  KeyToDelete := CONCAT('_7',CONCAT(:OLD.ACCEPTED, CONCAT(:OLD.EXPDELETER, :OLD.FRIEND_ID)));DeleteIT_DLL_Val := KOSARTriggerDeleteCall('RAYS', KeyToDelete, 0); END;",
		"CREATE OR REPLACE TRIGGER  Iuser_updates2071281097 BEFORE INSERT ON user_updates FOR EACH ROW DECLARE DeleteIT_DLL_Val BINARY_INTEGER; KeyToDelete  CLOB; /* DeleteKey CLOB; */ BEGIN KeyToDelete := ' ';  KeyToDelete := CONCAT('_7',CONCAT(:NEW.ACCEPTED, CONCAT(:NEW.EXPDELETER, :NEW.FRIEND_ID))); DeleteIT_DLL_Val := KOSARTriggerDeleteCall('RAYS', KeyToDelete, 0); END;",
		"CREATE OR REPLACE TRIGGER  Uuser_updates207128777 BEFORE UPDATE ON user_updates FOR EACH ROW DECLARE DeleteIT_DLL_Val BINARY_INTEGER; KeyToDelete  CLOB; /* DeleteKey CLOB; */ BEGIN KeyToDelete := ' ';  IF (:OLD.user_id <> :NEW.user_id OR :OLD.ACCEPTED <> :NEW.ACCEPTED OR :OLD.DELETES <> :NEW.DELETES) THEN  KeyToDelete := CONCAT('_7',CONCAT(:OLD.ACCEPTED, CONCAT(:OLD.DELETES, :OLD.USER_ID))); DeleteIT_DLL_Val := KOSARTriggerDeleteCall('RAYS', KeyToDelete, 0); END IF; END;",
		"CREATE OR REPLACE TRIGGER  Duser_updates207128777 BEFORE DELETE ON user_updates FOR EACH ROW DECLARE DeleteIT_DLL_Val BINARY_INTEGER; KeyToDelete  CLOB; /* DeleteKey CLOB; */ BEGIN KeyToDelete := ' ';  KeyToDelete := CONCAT('_7',CONCAT(:OLD.ACCEPTED, CONCAT(:OLD.DELETES, :OLD.USER_ID)));DeleteIT_DLL_Val := KOSARTriggerDeleteCall('RAYS', KeyToDelete, 0); END;",
		"CREATE OR REPLACE TRIGGER  Iuser_updates207128777 BEFORE INSERT ON user_updates FOR EACH ROW DECLARE DeleteIT_DLL_Val BINARY_INTEGER; KeyToDelete  CLOB; /* DeleteKey CLOB; */ BEGIN KeyToDelete := ' ';  KeyToDelete := CONCAT('_7',CONCAT(:NEW.ACCEPTED, CONCAT(:NEW.DELETES, :NEW.USER_ID))); DeleteIT_DLL_Val := KOSARTriggerDeleteCall('RAYS', KeyToDelete, 0); END;",
		"CREATE OR REPLACE TRIGGER  Uuser_updates30712871077 BEFORE UPDATE ON user_updates FOR EACH ROW DECLARE DeleteIT_DLL_Val BINARY_INTEGER; KeyToDelete  CLOB; /* DeleteKey CLOB; */ BEGIN KeyToDelete := ' ';  IF (:OLD.user_id <> :NEW.user_id OR :OLD.ACCEPTED <> :NEW.ACCEPTED OR :OLD.DELETES <> :NEW.DELETES OR :OLD.EXPDELETES <> :NEW.EXPDELETES) THEN  KeyToDelete := CONCAT('_7',CONCAT(:OLD.ACCEPTED, CONCAT(:OLD.DELETES, CONCAT(:OLD.EXPDELETES, :OLD.USER_ID)))); DeleteIT_DLL_Val := KOSARTriggerDeleteCall('RAYS', KeyToDelete, 0); END IF; END;",
		"CREATE OR REPLACE TRIGGER  Duser_updates30712871077 BEFORE DELETE ON user_updates FOR EACH ROW DECLARE DeleteIT_DLL_Val BINARY_INTEGER; KeyToDelete  CLOB; /* DeleteKey CLOB; */ BEGIN KeyToDelete := ' ';  KeyToDelete := CONCAT('_7',CONCAT(:OLD.ACCEPTED, CONCAT(:OLD.DELETES, CONCAT(:OLD.EXPDELETES, :OLD.USER_ID))));DeleteIT_DLL_Val := KOSARTriggerDeleteCall('RAYS', KeyToDelete, 0); END;",
		"CREATE OR REPLACE TRIGGER  Iuser_updates30712871077 BEFORE INSERT ON user_updates FOR EACH ROW DECLARE DeleteIT_DLL_Val BINARY_INTEGER; KeyToDelete  CLOB; /* DeleteKey CLOB; */ BEGIN KeyToDelete := ' ';  KeyToDelete := CONCAT('_7',CONCAT(:NEW.ACCEPTED, CONCAT(:NEW.DELETES, CONCAT(:NEW.EXPDELETES, :NEW.USER_ID)))); DeleteIT_DLL_Val := KOSARTriggerDeleteCall('RAYS', KeyToDelete, 0); END;",
		"CREATE OR REPLACE TRIGGER  Ulivestream0091099 BEFORE UPDATE ON livestream FOR EACH ROW DECLARE DeleteIT_DLL_Val BINARY_INTEGER; KeyToDelete  CLOB; /* DeleteKey CLOB; */ BEGIN KeyToDelete := ' ';  IF (:OLD.friend_id <> :NEW.friend_id) THEN  KeyToDelete := CONCAT('_9',:OLD.FRIEND_ID); DeleteIT_DLL_Val := KOSARTriggerDeleteCall('RAYS', KeyToDelete, 0); END IF; END;",
		"CREATE OR REPLACE TRIGGER  Dlivestream0091099 BEFORE DELETE ON livestream FOR EACH ROW DECLARE DeleteIT_DLL_Val BINARY_INTEGER; KeyToDelete  CLOB; /* DeleteKey CLOB; */ BEGIN KeyToDelete := ' ';  KeyToDelete := CONCAT('_9',:OLD.FRIEND_ID);DeleteIT_DLL_Val := KOSARTriggerDeleteCall('RAYS', KeyToDelete, 0); END;",
		"CREATE OR REPLACE TRIGGER  Ilivestream0091099 BEFORE INSERT ON livestream FOR EACH ROW DECLARE DeleteIT_DLL_Val BINARY_INTEGER; KeyToDelete  CLOB; /* DeleteKey CLOB; */ BEGIN KeyToDelete := ' ';  KeyToDelete := CONCAT('_9',:NEW.FRIEND_ID); DeleteIT_DLL_Val := KOSARTriggerDeleteCall('RAYS', KeyToDelete, 0); END;",
		"CREATE OR REPLACE TRIGGER  Uuser_cameras002112712 BEFORE UPDATE ON user_cameras FOR EACH ROW DECLARE DeleteIT_DLL_Val BINARY_INTEGER; KeyToDelete  CLOB; /* DeleteKey CLOB; */ BEGIN KeyToDelete := ' ';  IF (:OLD.is_streaming <> :NEW.is_streaming OR :OLD.USER_ID <> :NEW.USER_ID) THEN  KeyToDelete := CONCAT('_12',:OLD.USER_ID); DeleteIT_DLL_Val := KOSARTriggerDeleteCall('RAYS', KeyToDelete, 0); END IF; END;",
		"CREATE OR REPLACE TRIGGER  Duser_cameras002112712 BEFORE DELETE ON user_cameras FOR EACH ROW DECLARE DeleteIT_DLL_Val BINARY_INTEGER; KeyToDelete  CLOB; /* DeleteKey CLOB; */ BEGIN KeyToDelete := ' ';  KeyToDelete := CONCAT('_12',:OLD.USER_ID);DeleteIT_DLL_Val := KOSARTriggerDeleteCall('RAYS', KeyToDelete, 0); END;",
		"CREATE OR REPLACE TRIGGER  Iuser_cameras002112712 BEFORE INSERT ON user_cameras FOR EACH ROW DECLARE DeleteIT_DLL_Val BINARY_INTEGER; KeyToDelete  CLOB; /* DeleteKey CLOB; */ BEGIN KeyToDelete := ' ';  KeyToDelete := CONCAT('_12',:NEW.USER_ID); DeleteIT_DLL_Val := KOSARTriggerDeleteCall('RAYS', KeyToDelete, 0); END;",
		"CREATE OR REPLACE TRIGGER  Uusers007577 BEFORE UPDATE ON users FOR EACH ROW DECLARE DeleteIT_DLL_Val BINARY_INTEGER; KeyToDelete  CLOB; /* DeleteKey CLOB; */ BEGIN KeyToDelete := ' ';  IF (:OLD.changed <> :NEW.changed OR :OLD.USER_ID <> :NEW.USER_ID) THEN  KeyToDelete := CONCAT('_7',:OLD.USER_ID); DeleteIT_DLL_Val := KOSARTriggerDeleteCall('RAYS', KeyToDelete, 0); END IF; END;",
		"CREATE OR REPLACE TRIGGER  Dusers007577 BEFORE DELETE ON users FOR EACH ROW DECLARE DeleteIT_DLL_Val BINARY_INTEGER; KeyToDelete  CLOB; /* DeleteKey CLOB; */ BEGIN KeyToDelete := ' ';  KeyToDelete := CONCAT('_7',:OLD.USER_ID);DeleteIT_DLL_Val := KOSARTriggerDeleteCall('RAYS', KeyToDelete, 0); END;",
		"CREATE OR REPLACE TRIGGER  Iusers007577 BEFORE INSERT ON users FOR EACH ROW DECLARE DeleteIT_DLL_Val BINARY_INTEGER; KeyToDelete  CLOB; /* DeleteKey CLOB; */ BEGIN KeyToDelete := ' ';  KeyToDelete := CONCAT('_7',:NEW.USER_ID); DeleteIT_DLL_Val := KOSARTriggerDeleteCall('RAYS', KeyToDelete, 0); END;",
		"CREATE OR REPLACE PROCEDURE  USERS321835 (InArg1 IN USERS.USER_ID%TYPE /*, DeleteKey IN OUT CLOB*/)  IS var1  USER_CAMERAS.IS_STREAMING%TYPE; var2  FRIENDS.USERID%TYPE; var3  FRIENDS.STATUS%TYPE;  TOKEN CLOB := TO_CLOB('U.USER_ID=UC.USER_IDF.FRIENDID=U.USER_ID'); DeleteIT_DLL_Val BINARY_INTEGER; KeyToDelete CLOB;  CURSOR CRS1 IS SELECT USER_CAMERAS.IS_STREAMING, FRIENDS.USERID, FRIENDS.STATUS FROM USER_CAMERAS, FRIENDS WHERE USER_CAMERAS.USER_ID=InArg1 AND FRIENDS.FRIENDID=InArg1;  BEGIN  OPEN CRS1;  LOOP  FETCH CRS1 into var1, var2, var3;  EXIT WHEN CRS1%NOTFOUND; KeyToDelete := CONCAT(var1, CONCAT(var2, CONCAT(var3, TOKEN))); DeleteIT_DLL_Val := KOSARTriggerDeleteCall('RAYS', KeyToDelete, 0); END LOOP;  CLOSE CRS1; END;",
		"CREATE OR REPLACE TRIGGER  IUSERS321835 BEFORE INSERT ON USERS FOR EACH ROW DECLARE DELETEKEY CLOB; KEYTODELETE CLOB; DeleteIT_DLL_Val BINARY_INTEGER;  BEGIN  USERS321835(:NEW.USER_ID /*, DeleteKey*/);  END; ",
		"CREATE OR REPLACE TRIGGER  DUSERS321835 BEFORE DELETE ON USERS FOR EACH ROW DECLARE DELETEKEY CLOB; KEYTODELETE CLOB; DeleteIT_DLL_Val BINARY_INTEGER;  BEGIN  USERS321835(:OLD.USER_ID /*, DeleteKey*/);  END; ",
		"CREATE OR REPLACE TRIGGER  UUSERS321835 BEFORE UPDATE ON USERS FOR EACH ROW DECLARE DELETEKEY CLOB; KEYTODELETE CLOB; DeleteIT_DLL_Val BINARY_INTEGER;  BEGIN  USERS321835(:OLD.USER_ID /*, DeleteKey*/); IF (:NEW.USER_ID <> :OLD.USER_ID) THEN USERS321835(:NEW.USER_ID /*, DeleteKey*/);  END IF; END; ",
		"CREATE OR REPLACE PROCEDURE  USER_CAMERAS321835 (InArg1 IN USER_CAMERAS.IS_STREAMING%TYPE, InArg2 IN USER_CAMERAS.USER_ID%TYPE /*, DeleteKey IN OUT CLOB*/)  IS var1  USER_CAMERAS.IS_STREAMING%TYPE; var2  FRIENDS.USERID%TYPE; var3  FRIENDS.STATUS%TYPE;  TOKEN CLOB := TO_CLOB('U.USER_ID=UC.USER_IDF.FRIENDID=U.USER_ID'); DeleteIT_DLL_Val BINARY_INTEGER; KeyToDelete CLOB;  CURSOR CRS1 IS SELECT  InArg1, FRIENDS.USERID, FRIENDS.STATUS FROM USERS, FRIENDS WHERE USERS.USER_ID=InArg2 AND  FRIENDS.FRIENDID=USERS.USER_ID ;  BEGIN  OPEN CRS1;  LOOP  FETCH CRS1 into var1, var2, var3;  EXIT WHEN CRS1%NOTFOUND; KeyToDelete := CONCAT(var1, CONCAT(var2, CONCAT(var3, TOKEN))); DeleteIT_DLL_Val := KOSARTriggerDeleteCall('RAYS', KeyToDelete, 0); END LOOP;  CLOSE CRS1; END;",
		"CREATE OR REPLACE TRIGGER  IUSER_CAMERAS321835 BEFORE INSERT ON USER_CAMERAS FOR EACH ROW DECLARE DELETEKEY CLOB; KEYTODELETE CLOB; DeleteIT_DLL_Val BINARY_INTEGER;  BEGIN  USER_CAMERAS321835(:NEW.IS_STREAMING, :NEW.USER_ID /*, DeleteKey*/);  END; ",
		"CREATE OR REPLACE TRIGGER  DUSER_CAMERAS321835 BEFORE DELETE ON USER_CAMERAS FOR EACH ROW DECLARE DELETEKEY CLOB; KEYTODELETE CLOB; DeleteIT_DLL_Val BINARY_INTEGER;  BEGIN  USER_CAMERAS321835(:OLD.IS_STREAMING, :OLD.USER_ID /*, DeleteKey*/);  END; ",
		"CREATE OR REPLACE TRIGGER  UUSER_CAMERAS321835 BEFORE UPDATE ON USER_CAMERAS FOR EACH ROW DECLARE DELETEKEY CLOB; KEYTODELETE CLOB; DeleteIT_DLL_Val BINARY_INTEGER;  BEGIN  USER_CAMERAS321835(:OLD.IS_STREAMING, :OLD.USER_ID /*, DeleteKey*/); IF (:NEW.IS_STREAMING <> :OLD.IS_STREAMING OR :NEW.USER_ID <> :OLD.USER_ID) THEN USER_CAMERAS321835(:NEW.IS_STREAMING, :NEW.USER_ID /*, DeleteKey*/);  END IF; END; ",
		"CREATE OR REPLACE PROCEDURE  FRIENDS321835 (InArg1 IN FRIENDS.USERID%TYPE, InArg2 IN FRIENDS.STATUS%TYPE, InArg3 IN FRIENDS.FRIENDID%TYPE /*, DeleteKey IN OUT CLOB*/)  IS var1  USER_CAMERAS.IS_STREAMING%TYPE; var2  FRIENDS.USERID%TYPE; var3  FRIENDS.STATUS%TYPE;  TOKEN CLOB := TO_CLOB('U.USER_ID=UC.USER_IDF.FRIENDID=U.USER_ID'); DeleteIT_DLL_Val BINARY_INTEGER; KeyToDelete CLOB;  CURSOR CRS1 IS SELECT USER_CAMERAS.IS_STREAMING,  InArg1,  InArg2 FROM USERS, USER_CAMERAS WHERE  USERS.USER_ID=USER_CAMERAS.USER_ID  AND USERS.USER_ID=InArg3;  BEGIN  OPEN CRS1;  LOOP  FETCH CRS1 into var1, var2, var3;  EXIT WHEN CRS1%NOTFOUND; KeyToDelete := CONCAT(var1, CONCAT(var2, CONCAT(var3, TOKEN))); DeleteIT_DLL_Val := KOSARTriggerDeleteCall('RAYS', KeyToDelete, 0); END LOOP;  CLOSE CRS1; END;",
		"CREATE OR REPLACE TRIGGER  IFRIENDS321835 BEFORE INSERT ON FRIENDS FOR EACH ROW DECLARE DELETEKEY CLOB; KEYTODELETE CLOB; DeleteIT_DLL_Val BINARY_INTEGER;  BEGIN  FRIENDS321835(:NEW.USERID, :NEW.STATUS, :NEW.FRIENDID /*, DeleteKey*/);  END; ",
		"CREATE OR REPLACE TRIGGER  DFRIENDS321835 BEFORE DELETE ON FRIENDS FOR EACH ROW DECLARE DELETEKEY CLOB; KEYTODELETE CLOB; DeleteIT_DLL_Val BINARY_INTEGER;  BEGIN  FRIENDS321835(:OLD.USERID, :OLD.STATUS, :OLD.FRIENDID /*, DeleteKey*/);  END; ",
		"CREATE OR REPLACE TRIGGER  UFRIENDS321835 BEFORE UPDATE ON FRIENDS FOR EACH ROW DECLARE DELETEKEY CLOB; KEYTODELETE CLOB; DeleteIT_DLL_Val BINARY_INTEGER;  BEGIN  FRIENDS321835(:OLD.USERID, :OLD.STATUS, :OLD.FRIENDID /*, DeleteKey*/); IF (:NEW.USERID <> :OLD.USERID OR :NEW.STATUS <> :OLD.STATUS OR :NEW.FRIENDID <> :OLD.FRIENDID) THEN FRIENDS321835(:NEW.USERID, :NEW.STATUS, :NEW.FRIENDID /*, DeleteKey*/);  END IF; END; ",
		"CREATE OR REPLACE PROCEDURE  USERS32935 (InArg1 IN USERS.USER_ID%TYPE /*, DeleteKey IN OUT CLOB*/)  IS var1  USER_CAMERAS.IS_STREAMING%TYPE; var2  FRIENDS.STATUS%TYPE; var3  FRIENDS.FRIENDID%TYPE;  TOKEN CLOB := TO_CLOB('U.USER_ID=UC.USER_IDF.USERID=U.USER_ID'); DeleteIT_DLL_Val BINARY_INTEGER; KeyToDelete CLOB;  CURSOR CRS1 IS SELECT USER_CAMERAS.IS_STREAMING, FRIENDS.STATUS, FRIENDS.FRIENDID FROM USER_CAMERAS, FRIENDS WHERE USER_CAMERAS.USER_ID=InArg1 AND FRIENDS.USERID=InArg1;  BEGIN  OPEN CRS1;  LOOP  FETCH CRS1 into var1, var2, var3;  EXIT WHEN CRS1%NOTFOUND; KeyToDelete := CONCAT(var1, CONCAT(var2, CONCAT(var3, TOKEN))); DeleteIT_DLL_Val := KOSARTriggerDeleteCall('RAYS', KeyToDelete, 0); END LOOP;  CLOSE CRS1; END;",
		"CREATE OR REPLACE TRIGGER  IUSERS32935 BEFORE INSERT ON USERS FOR EACH ROW DECLARE DELETEKEY CLOB; KEYTODELETE CLOB; DeleteIT_DLL_Val BINARY_INTEGER;  BEGIN  USERS32935(:NEW.USER_ID /*, DeleteKey*/);  END; ",
		"CREATE OR REPLACE TRIGGER  DUSERS32935 BEFORE DELETE ON USERS FOR EACH ROW DECLARE DELETEKEY CLOB; KEYTODELETE CLOB; DeleteIT_DLL_Val BINARY_INTEGER;  BEGIN  USERS32935(:OLD.USER_ID /*, DeleteKey*/);  END; ",
		"CREATE OR REPLACE TRIGGER  UUSERS32935 BEFORE UPDATE ON USERS FOR EACH ROW DECLARE DELETEKEY CLOB; KEYTODELETE CLOB; DeleteIT_DLL_Val BINARY_INTEGER;  BEGIN  USERS32935(:OLD.USER_ID /*, DeleteKey*/); IF (:NEW.USER_ID <> :OLD.USER_ID) THEN USERS32935(:NEW.USER_ID /*, DeleteKey*/);  END IF; END; ",
		"CREATE OR REPLACE PROCEDURE  USER_CAMERAS32935 (InArg1 IN USER_CAMERAS.IS_STREAMING%TYPE, InArg2 IN USER_CAMERAS.USER_ID%TYPE /*, DeleteKey IN OUT CLOB*/)  IS var1  USER_CAMERAS.IS_STREAMING%TYPE; var2  FRIENDS.STATUS%TYPE; var3  FRIENDS.FRIENDID%TYPE;  TOKEN CLOB := TO_CLOB('U.USER_ID=UC.USER_IDF.USERID=U.USER_ID'); DeleteIT_DLL_Val BINARY_INTEGER; KeyToDelete CLOB;  CURSOR CRS1 IS SELECT  InArg1, FRIENDS.STATUS, FRIENDS.FRIENDID FROM USERS, FRIENDS WHERE USERS.USER_ID=InArg2 AND  FRIENDS.USERID=USERS.USER_ID ;  BEGIN  OPEN CRS1;  LOOP  FETCH CRS1 into var1, var2, var3;  EXIT WHEN CRS1%NOTFOUND; KeyToDelete := CONCAT(var1, CONCAT(var2, CONCAT(var3, TOKEN))); DeleteIT_DLL_Val := KOSARTriggerDeleteCall('RAYS', KeyToDelete, 0); END LOOP;  CLOSE CRS1; END;",
		"CREATE OR REPLACE TRIGGER  IUSER_CAMERAS32935 BEFORE INSERT ON USER_CAMERAS FOR EACH ROW DECLARE DELETEKEY CLOB; KEYTODELETE CLOB; DeleteIT_DLL_Val BINARY_INTEGER;  BEGIN  USER_CAMERAS32935(:NEW.IS_STREAMING, :NEW.USER_ID /*, DeleteKey*/);  END; ",
		"CREATE OR REPLACE TRIGGER  DUSER_CAMERAS32935 BEFORE DELETE ON USER_CAMERAS FOR EACH ROW DECLARE DELETEKEY CLOB; KEYTODELETE CLOB; DeleteIT_DLL_Val BINARY_INTEGER;  BEGIN  USER_CAMERAS32935(:OLD.IS_STREAMING, :OLD.USER_ID /*, DeleteKey*/);  END; ",
		"CREATE OR REPLACE TRIGGER  UUSER_CAMERAS32935 BEFORE UPDATE ON USER_CAMERAS FOR EACH ROW DECLARE DELETEKEY CLOB; KEYTODELETE CLOB; DeleteIT_DLL_Val BINARY_INTEGER;  BEGIN  USER_CAMERAS32935(:OLD.IS_STREAMING, :OLD.USER_ID /*, DeleteKey*/); IF (:NEW.IS_STREAMING <> :OLD.IS_STREAMING OR :NEW.USER_ID <> :OLD.USER_ID) THEN USER_CAMERAS32935(:NEW.IS_STREAMING, :NEW.USER_ID /*, DeleteKey*/);  END IF; END; ",
		"CREATE OR REPLACE PROCEDURE  FRIENDS32935 (InArg1 IN FRIENDS.STATUS%TYPE, InArg2 IN FRIENDS.FRIENDID%TYPE, InArg3 IN FRIENDS.USERID%TYPE /*, DeleteKey IN OUT CLOB*/)  IS var1  USER_CAMERAS.IS_STREAMING%TYPE; var2  FRIENDS.STATUS%TYPE; var3  FRIENDS.FRIENDID%TYPE;  TOKEN CLOB := TO_CLOB('U.USER_ID=UC.USER_IDF.USERID=U.USER_ID'); DeleteIT_DLL_Val BINARY_INTEGER; KeyToDelete CLOB;  CURSOR CRS1 IS SELECT USER_CAMERAS.IS_STREAMING,  InArg1,  InArg2 FROM USERS, USER_CAMERAS WHERE  USERS.USER_ID=USER_CAMERAS.USER_ID  AND USERS.USER_ID=InArg3;  BEGIN  OPEN CRS1;  LOOP  FETCH CRS1 into var1, var2, var3;  EXIT WHEN CRS1%NOTFOUND; KeyToDelete := CONCAT(var1, CONCAT(var2, CONCAT(var3, TOKEN))); DeleteIT_DLL_Val := KOSARTriggerDeleteCall('RAYS', KeyToDelete, 0); END LOOP;  CLOSE CRS1; END;",
		"CREATE OR REPLACE TRIGGER  IFRIENDS32935 BEFORE INSERT ON FRIENDS FOR EACH ROW DECLARE DELETEKEY CLOB; KEYTODELETE CLOB; DeleteIT_DLL_Val BINARY_INTEGER;  BEGIN  FRIENDS32935(:NEW.STATUS, :NEW.FRIENDID, :NEW.USERID /*, DeleteKey*/);  END; ",
		"CREATE OR REPLACE TRIGGER  DFRIENDS32935 BEFORE DELETE ON FRIENDS FOR EACH ROW DECLARE DELETEKEY CLOB; KEYTODELETE CLOB; DeleteIT_DLL_Val BINARY_INTEGER;  BEGIN  FRIENDS32935(:OLD.STATUS, :OLD.FRIENDID, :OLD.USERID /*, DeleteKey*/);  END; ",
		"CREATE OR REPLACE TRIGGER  UFRIENDS32935 BEFORE UPDATE ON FRIENDS FOR EACH ROW DECLARE DELETEKEY CLOB; KEYTODELETE CLOB; DeleteIT_DLL_Val BINARY_INTEGER;  BEGIN  FRIENDS32935(:OLD.STATUS, :OLD.FRIENDID, :OLD.USERID /*, DeleteKey*/); IF (:NEW.STATUS <> :OLD.STATUS OR :NEW.FRIENDID <> :OLD.FRIENDID OR :NEW.USERID <> :OLD.USERID) THEN FRIENDS32935(:NEW.STATUS, :NEW.FRIENDID, :NEW.USERID /*, DeleteKey*/);  END IF; END; ",
		"CREATE OR REPLACE PROCEDURE  USER_CAMERAS215724 (arg1 IN USER_CAMERAS.USER_ID%TYPE, arg2 IN USER_CAMERAS.IS_STREAMING%TYPE/*, DeleteKey IN OUT CLOB*/) IS TOKEN CLOB := TO_CLOB('U.CAMERA_ID=C.CAMERA_ID');DeleteIT_DLL_Val BINARY_INTEGER;KeyToDelete CLOB; BEGIN KeyToDelete := CONCAT(arg1, CONCAT(arg2, TOKEN)); DeleteIT_DLL_Val := KOSARTriggerDeleteCall('RAYS', KeyToDelete, 0);END;",
		"CREATE OR REPLACE TRIGGER  IUSER_CAMERAS215724 BEFORE INSERT ON USER_CAMERAS FOR EACH ROW DECLARE DELETEKEY CLOB; KEYTODELETE CLOB; DeleteIT_DLL_Val BINARY_INTEGER;  BEGIN  USER_CAMERAS215724(:NEW.USER_ID, :NEW.IS_STREAMING /*, DeleteKey*/);  END; ",
		"CREATE OR REPLACE TRIGGER  DUSER_CAMERAS215724 BEFORE DELETE ON USER_CAMERAS FOR EACH ROW DECLARE DELETEKEY CLOB; KEYTODELETE CLOB; DeleteIT_DLL_Val BINARY_INTEGER;  BEGIN  USER_CAMERAS215724(:OLD.USER_ID, :OLD.IS_STREAMING /*, DeleteKey*/);  END; ",
		"CREATE OR REPLACE TRIGGER  UUSER_CAMERAS215724 BEFORE UPDATE ON USER_CAMERAS FOR EACH ROW DECLARE DELETEKEY CLOB; KEYTODELETE CLOB; DeleteIT_DLL_Val BINARY_INTEGER;  BEGIN  USER_CAMERAS215724(:OLD.USER_ID, :OLD.IS_STREAMING /*, DeleteKey*/); IF (:NEW.USER_ID <> :OLD.USER_ID OR :NEW.IS_STREAMING <> :OLD.IS_STREAMING) THEN USER_CAMERAS215724(:New.USER_ID, :New.IS_STREAMING /*, DeleteKey*/);  END IF; END; ",
		"CREATE OR REPLACE PROCEDURE  CAMERA215724 (InArg1 IN CAMERA.CAMERA_ID%TYPE /*, DeleteKey IN OUT CLOB*/)  IS var1  USER_CAMERAS.USER_ID%TYPE; var2  USER_CAMERAS.IS_STREAMING%TYPE;  TOKEN CLOB := TO_CLOB('U.CAMERA_ID=C.CAMERA_ID'); DeleteIT_DLL_Val BINARY_INTEGER; KeyToDelete CLOB;  CURSOR CRS1 IS SELECT USER_CAMERAS.USER_ID, USER_CAMERAS.IS_STREAMING FROM USER_CAMERAS WHERE USER_CAMERAS.CAMERA_ID=InArg1;  BEGIN  OPEN CRS1;  LOOP  FETCH CRS1 into var1, var2;  EXIT WHEN CRS1%NOTFOUND; KeyToDelete := CONCAT(var1, CONCAT(var2, TOKEN)); DeleteIT_DLL_Val := KOSARTriggerDeleteCall('RAYS', KeyToDelete, 0); END LOOP;  CLOSE CRS1; END;",
		"CREATE OR REPLACE TRIGGER  ICAMERA215724 BEFORE INSERT ON CAMERA FOR EACH ROW DECLARE DELETEKEY CLOB; KEYTODELETE CLOB; DeleteIT_DLL_Val BINARY_INTEGER;  BEGIN  CAMERA215724(:NEW.CAMERA_ID /*, DeleteKey*/);  END; ",
		"CREATE OR REPLACE TRIGGER  DCAMERA215724 BEFORE DELETE ON CAMERA FOR EACH ROW DECLARE DELETEKEY CLOB; KEYTODELETE CLOB; DeleteIT_DLL_Val BINARY_INTEGER;  BEGIN  CAMERA215724(:OLD.CAMERA_ID /*, DeleteKey*/);  END; ",
		"CREATE OR REPLACE TRIGGER  UCAMERA215724 BEFORE UPDATE ON CAMERA FOR EACH ROW DECLARE DELETEKEY CLOB; KEYTODELETE CLOB; DeleteIT_DLL_Val BINARY_INTEGER;  BEGIN  CAMERA215724(:OLD.CAMERA_ID /*, DeleteKey*/); IF (:NEW.CAMERA_ID <> :OLD.CAMERA_ID) THEN CAMERA215724(:NEW.CAMERA_ID /*, DeleteKey*/);  END IF; END; ",
		"CREATE OR REPLACE PROCEDURE  USER_CAMERAS226431 (arg1 IN USER_CAMERAS.USER_ID%TYPE, arg2 IN USER_CAMERAS.IS_STREAMING%TYPE/*, DeleteKey IN OUT CLOB*/) IS TOKEN CLOB := TO_CLOB('UU.USER_ID=U.USER_IDUU.FRIEND_ID=U.USER_ID');DeleteIT_DLL_Val BINARY_INTEGER;KeyToDelete CLOB; BEGIN KeyToDelete := CONCAT(arg1, CONCAT(arg2, TOKEN)); DeleteIT_DLL_Val := KOSARTriggerDeleteCall('RAYS', KeyToDelete, 0);END;",
		"CREATE OR REPLACE TRIGGER  IUSER_CAMERAS226431 BEFORE INSERT ON USER_CAMERAS FOR EACH ROW DECLARE DELETEKEY CLOB; KEYTODELETE CLOB; DeleteIT_DLL_Val BINARY_INTEGER;  BEGIN  USER_CAMERAS226431(:NEW.USER_ID, :NEW.IS_STREAMING /*, DeleteKey*/);  END; ",
		"CREATE OR REPLACE TRIGGER  DUSER_CAMERAS226431 BEFORE DELETE ON USER_CAMERAS FOR EACH ROW DECLARE DELETEKEY CLOB; KEYTODELETE CLOB; DeleteIT_DLL_Val BINARY_INTEGER;  BEGIN  USER_CAMERAS226431(:OLD.USER_ID, :OLD.IS_STREAMING /*, DeleteKey*/);  END; ",
		"CREATE OR REPLACE TRIGGER  UUSER_CAMERAS226431 BEFORE UPDATE ON USER_CAMERAS FOR EACH ROW DECLARE DELETEKEY CLOB; KEYTODELETE CLOB; DeleteIT_DLL_Val BINARY_INTEGER;  BEGIN  USER_CAMERAS226431(:OLD.USER_ID, :OLD.IS_STREAMING /*, DeleteKey*/); IF (:NEW.USER_ID <> :OLD.USER_ID OR :NEW.IS_STREAMING <> :OLD.IS_STREAMING) THEN USER_CAMERAS226431(:New.USER_ID, :New.IS_STREAMING /*, DeleteKey*/);  END IF; END; ",
		"CREATE OR REPLACE PROCEDURE  USER_UPDATES226431 (InArg1 IN USER_UPDATES.USER_ID%TYPE, InArg2 IN USER_UPDATES.FRIEND_ID%TYPE /*, DeleteKey IN OUT CLOB*/)  IS var1  USER_CAMERAS.USER_ID%TYPE; var2  USER_CAMERAS.IS_STREAMING%TYPE;  TOKEN CLOB := TO_CLOB('UU.USER_ID=U.USER_IDUU.FRIEND_ID=U.USER_ID'); DeleteIT_DLL_Val BINARY_INTEGER; KeyToDelete CLOB;  CURSOR CRS1 IS SELECT USER_CAMERAS.USER_ID, USER_CAMERAS.IS_STREAMING FROM USER_CAMERAS WHERE USER_CAMERAS.USER_ID=InArg1 AND USER_CAMERAS.USER_ID=InArg2;  BEGIN  OPEN CRS1;  LOOP  FETCH CRS1 into var1, var2;  EXIT WHEN CRS1%NOTFOUND; KeyToDelete := CONCAT(var1, CONCAT(var2, TOKEN)); DeleteIT_DLL_Val := KOSARTriggerDeleteCall('RAYS', KeyToDelete, 0); END LOOP;  CLOSE CRS1; END;",
		"CREATE OR REPLACE TRIGGER  IUSER_UPDATES226431 BEFORE INSERT ON USER_UPDATES FOR EACH ROW DECLARE DELETEKEY CLOB; KEYTODELETE CLOB; DeleteIT_DLL_Val BINARY_INTEGER;  BEGIN  USER_UPDATES226431(:NEW.USER_ID, :NEW.FRIEND_ID /*, DeleteKey*/);  END; ",
		"CREATE OR REPLACE TRIGGER  DUSER_UPDATES226431 BEFORE DELETE ON USER_UPDATES FOR EACH ROW DECLARE DELETEKEY CLOB; KEYTODELETE CLOB; DeleteIT_DLL_Val BINARY_INTEGER;  BEGIN  USER_UPDATES226431(:OLD.USER_ID, :OLD.FRIEND_ID /*, DeleteKey*/);  END; ",
		"CREATE OR REPLACE TRIGGER  UUSER_UPDATES226431 BEFORE UPDATE ON USER_UPDATES FOR EACH ROW DECLARE DELETEKEY CLOB; KEYTODELETE CLOB; DeleteIT_DLL_Val BINARY_INTEGER;  BEGIN  USER_UPDATES226431(:OLD.USER_ID, :OLD.FRIEND_ID /*, DeleteKey*/); IF (:NEW.USER_ID <> :OLD.USER_ID OR :NEW.FRIEND_ID <> :OLD.FRIEND_ID) THEN USER_UPDATES226431(:NEW.USER_ID, :NEW.FRIEND_ID /*, DeleteKey*/);  END IF; END; ",
		"CREATE OR REPLACE PROCEDURE  USER_UPDATES227740 (InArg1 IN USER_UPDATES.FRIEND_ID%TYPE, InArg2 IN USER_UPDATES.UPDATE_ID%TYPE, InArg3 IN USER_UPDATES.CAMERA_ID%TYPE /*, DeleteKey IN OUT CLOB*/)  IS var1  USER_UPDATES.FRIEND_ID%TYPE; var2  LIVESTREAM.EDITED%TYPE;  TOKEN CLOB := TO_CLOB('UU.UPDATE_ID=LI.UPDATE_IDUU.CAMERA_ID=C.CAMERA_ID'); DeleteIT_DLL_Val BINARY_INTEGER; KeyToDelete CLOB;  CURSOR CRS1 IS SELECT  InArg1, LIVESTREAM.EDITED FROM LIVESTREAM, CAMERA WHERE LIVESTREAM.UPDATE_ID=InArg2 AND CAMERA.CAMERA_ID=InArg3;  BEGIN  OPEN CRS1;  LOOP  FETCH CRS1 into var1, var2;  EXIT WHEN CRS1%NOTFOUND; KeyToDelete := CONCAT(var1, CONCAT(var2, TOKEN)); DeleteIT_DLL_Val := KOSARTriggerDeleteCall('RAYS', KeyToDelete, 0); END LOOP;  CLOSE CRS1; END;",
		"CREATE OR REPLACE TRIGGER  IUSER_UPDATES227740 BEFORE INSERT ON USER_UPDATES FOR EACH ROW DECLARE DELETEKEY CLOB; KEYTODELETE CLOB; DeleteIT_DLL_Val BINARY_INTEGER;  BEGIN  USER_UPDATES227740(:NEW.FRIEND_ID, :NEW.UPDATE_ID, :NEW.CAMERA_ID /*, DeleteKey*/);  END; ",
		"CREATE OR REPLACE TRIGGER  DUSER_UPDATES227740 BEFORE DELETE ON USER_UPDATES FOR EACH ROW DECLARE DELETEKEY CLOB; KEYTODELETE CLOB; DeleteIT_DLL_Val BINARY_INTEGER;  BEGIN  USER_UPDATES227740(:OLD.FRIEND_ID, :OLD.UPDATE_ID, :OLD.CAMERA_ID /*, DeleteKey*/);  END; ",
		"CREATE OR REPLACE TRIGGER  UUSER_UPDATES227740 BEFORE UPDATE ON USER_UPDATES FOR EACH ROW DECLARE DELETEKEY CLOB; KEYTODELETE CLOB; DeleteIT_DLL_Val BINARY_INTEGER;  BEGIN  USER_UPDATES227740(:OLD.FRIEND_ID, :OLD.UPDATE_ID, :OLD.CAMERA_ID /*, DeleteKey*/); IF (:NEW.FRIEND_ID <> :OLD.FRIEND_ID OR :NEW.UPDATE_ID <> :OLD.UPDATE_ID OR :NEW.CAMERA_ID <> :OLD.CAMERA_ID) THEN USER_UPDATES227740(:NEW.FRIEND_ID, :NEW.UPDATE_ID, :NEW.CAMERA_ID /*, DeleteKey*/);  END IF; END; ",
		"CREATE OR REPLACE PROCEDURE  LIVESTREAM227740 (InArg1 IN LIVESTREAM.EDITED%TYPE, InArg2 IN LIVESTREAM.UPDATE_ID%TYPE /*, DeleteKey IN OUT CLOB*/)  IS var1  USER_UPDATES.FRIEND_ID%TYPE; var2  LIVESTREAM.EDITED%TYPE;  TOKEN CLOB := TO_CLOB('UU.UPDATE_ID=LI.UPDATE_IDUU.CAMERA_ID=C.CAMERA_ID'); DeleteIT_DLL_Val BINARY_INTEGER; KeyToDelete CLOB;  CURSOR CRS1 IS SELECT USER_UPDATES.FRIEND_ID,  InArg1 FROM USER_UPDATES, CAMERA WHERE USER_UPDATES.UPDATE_ID=InArg2 AND  USER_UPDATES.CAMERA_ID=CAMERA.CAMERA_ID ;  BEGIN  OPEN CRS1;  LOOP  FETCH CRS1 into var1, var2;  EXIT WHEN CRS1%NOTFOUND; KeyToDelete := CONCAT(var1, CONCAT(var2, TOKEN)); DeleteIT_DLL_Val := KOSARTriggerDeleteCall('RAYS', KeyToDelete, 0); END LOOP;  CLOSE CRS1; END;",
		"CREATE OR REPLACE TRIGGER  ILIVESTREAM227740 BEFORE INSERT ON LIVESTREAM FOR EACH ROW DECLARE DELETEKEY CLOB; KEYTODELETE CLOB; DeleteIT_DLL_Val BINARY_INTEGER;  BEGIN  LIVESTREAM227740(:NEW.EDITED, :NEW.UPDATE_ID /*, DeleteKey*/);  END; ",
		"CREATE OR REPLACE TRIGGER  DLIVESTREAM227740 BEFORE DELETE ON LIVESTREAM FOR EACH ROW DECLARE DELETEKEY CLOB; KEYTODELETE CLOB; DeleteIT_DLL_Val BINARY_INTEGER;  BEGIN  LIVESTREAM227740(:OLD.EDITED, :OLD.UPDATE_ID /*, DeleteKey*/);  END; ",
		"CREATE OR REPLACE TRIGGER  ULIVESTREAM227740 BEFORE UPDATE ON LIVESTREAM FOR EACH ROW DECLARE DELETEKEY CLOB; KEYTODELETE CLOB; DeleteIT_DLL_Val BINARY_INTEGER;  BEGIN  LIVESTREAM227740(:OLD.EDITED, :OLD.UPDATE_ID /*, DeleteKey*/); IF (:NEW.EDITED <> :OLD.EDITED OR :NEW.UPDATE_ID <> :OLD.UPDATE_ID) THEN LIVESTREAM227740(:NEW.EDITED, :NEW.UPDATE_ID /*, DeleteKey*/);  END IF; END; ",
		"CREATE OR REPLACE PROCEDURE  CAMERA227740 (InArg1 IN CAMERA.CAMERA_ID%TYPE /*, DeleteKey IN OUT CLOB*/)  IS var1  USER_UPDATES.FRIEND_ID%TYPE; var2  LIVESTREAM.EDITED%TYPE;  TOKEN CLOB := TO_CLOB('UU.UPDATE_ID=LI.UPDATE_IDUU.CAMERA_ID=C.CAMERA_ID'); DeleteIT_DLL_Val BINARY_INTEGER; KeyToDelete CLOB;  CURSOR CRS1 IS SELECT USER_UPDATES.FRIEND_ID, LIVESTREAM.EDITED FROM USER_UPDATES, LIVESTREAM WHERE  USER_UPDATES.UPDATE_ID=LIVESTREAM.UPDATE_ID  AND USER_UPDATES.CAMERA_ID=InArg1;  BEGIN  OPEN CRS1;  LOOP  FETCH CRS1 into var1, var2;  EXIT WHEN CRS1%NOTFOUND; KeyToDelete := CONCAT(var1, CONCAT(var2, TOKEN)); DeleteIT_DLL_Val := KOSARTriggerDeleteCall('RAYS', KeyToDelete, 0); END LOOP;  CLOSE CRS1; END;",
		"CREATE OR REPLACE TRIGGER  ICAMERA227740 BEFORE INSERT ON CAMERA FOR EACH ROW DECLARE DELETEKEY CLOB; KEYTODELETE CLOB; DeleteIT_DLL_Val BINARY_INTEGER;  BEGIN  CAMERA227740(:NEW.CAMERA_ID /*, DeleteKey*/);  END; ",
		"CREATE OR REPLACE TRIGGER  DCAMERA227740 BEFORE DELETE ON CAMERA FOR EACH ROW DECLARE DELETEKEY CLOB; KEYTODELETE CLOB; DeleteIT_DLL_Val BINARY_INTEGER;  BEGIN  CAMERA227740(:OLD.CAMERA_ID /*, DeleteKey*/);  END; ",
		"CREATE OR REPLACE TRIGGER  UCAMERA227740 BEFORE UPDATE ON CAMERA FOR EACH ROW DECLARE DELETEKEY CLOB; KEYTODELETE CLOB; DeleteIT_DLL_Val BINARY_INTEGER;  BEGIN  CAMERA227740(:OLD.CAMERA_ID /*, DeleteKey*/); IF (:NEW.CAMERA_ID <> :OLD.CAMERA_ID) THEN CAMERA227740(:NEW.CAMERA_ID /*, DeleteKey*/);  END IF; END; ",
		"CREATE OR REPLACE PROCEDURE  USER_UPDATES228340 (InArg1 IN USER_UPDATES.FRIEND_ID%TYPE, InArg2 IN USER_UPDATES.UPDATE_ID%TYPE, InArg3 IN USER_UPDATES.CAMERA_ID%TYPE /*, DeleteKey IN OUT CLOB*/)  IS var1  USER_UPDATES.FRIEND_ID%TYPE; var2  LIVESTREAM.EDITED%TYPE;  TOKEN CLOB := TO_CLOB('UU.UPDATE_ID=LI.UPDATE_IDUU.CAMERA_ID=C.CAMERA_ID'); DeleteIT_DLL_Val BINARY_INTEGER; KeyToDelete CLOB;  CURSOR CRS1 IS SELECT  InArg1, LIVESTREAM.EDITED FROM LIVESTREAM, CAMERA WHERE LIVESTREAM.UPDATE_ID=InArg2 AND CAMERA.CAMERA_ID=InArg3;  BEGIN  OPEN CRS1;  LOOP  FETCH CRS1 into var1, var2;  EXIT WHEN CRS1%NOTFOUND; KeyToDelete := CONCAT(var1, CONCAT(var2, TOKEN)); DeleteIT_DLL_Val := KOSARTriggerDeleteCall('RAYS', KeyToDelete, 0); END LOOP;  CLOSE CRS1; END;",
		"CREATE OR REPLACE TRIGGER  IUSER_UPDATES228340 BEFORE INSERT ON USER_UPDATES FOR EACH ROW DECLARE DELETEKEY CLOB; KEYTODELETE CLOB; DeleteIT_DLL_Val BINARY_INTEGER;  BEGIN  USER_UPDATES228340(:NEW.FRIEND_ID, :NEW.UPDATE_ID, :NEW.CAMERA_ID /*, DeleteKey*/);  END; ",
		"CREATE OR REPLACE TRIGGER  DUSER_UPDATES228340 BEFORE DELETE ON USER_UPDATES FOR EACH ROW DECLARE DELETEKEY CLOB; KEYTODELETE CLOB; DeleteIT_DLL_Val BINARY_INTEGER;  BEGIN  USER_UPDATES228340(:OLD.FRIEND_ID, :OLD.UPDATE_ID, :OLD.CAMERA_ID /*, DeleteKey*/);  END; ",
		"CREATE OR REPLACE TRIGGER  UUSER_UPDATES228340 BEFORE UPDATE ON USER_UPDATES FOR EACH ROW DECLARE DELETEKEY CLOB; KEYTODELETE CLOB; DeleteIT_DLL_Val BINARY_INTEGER;  BEGIN  USER_UPDATES228340(:OLD.FRIEND_ID, :OLD.UPDATE_ID, :OLD.CAMERA_ID /*, DeleteKey*/); IF (:NEW.FRIEND_ID <> :OLD.FRIEND_ID OR :NEW.UPDATE_ID <> :OLD.UPDATE_ID OR :NEW.CAMERA_ID <> :OLD.CAMERA_ID) THEN USER_UPDATES228340(:NEW.FRIEND_ID, :NEW.UPDATE_ID, :NEW.CAMERA_ID /*, DeleteKey*/);  END IF; END; ",
		"CREATE OR REPLACE PROCEDURE  LIVESTREAM228340 (InArg1 IN LIVESTREAM.EDITED%TYPE, InArg2 IN LIVESTREAM.UPDATE_ID%TYPE /*, DeleteKey IN OUT CLOB*/)  IS var1  USER_UPDATES.FRIEND_ID%TYPE; var2  LIVESTREAM.EDITED%TYPE;  TOKEN CLOB := TO_CLOB('UU.UPDATE_ID=LI.UPDATE_IDUU.CAMERA_ID=C.CAMERA_ID'); DeleteIT_DLL_Val BINARY_INTEGER; KeyToDelete CLOB;  CURSOR CRS1 IS SELECT USER_UPDATES.FRIEND_ID,  InArg1 FROM USER_UPDATES, CAMERA WHERE USER_UPDATES.UPDATE_ID=InArg2 AND  USER_UPDATES.CAMERA_ID=CAMERA.CAMERA_ID ;  BEGIN  OPEN CRS1;  LOOP  FETCH CRS1 into var1, var2;  EXIT WHEN CRS1%NOTFOUND; KeyToDelete := CONCAT(var1, CONCAT(var2, TOKEN)); DeleteIT_DLL_Val := KOSARTriggerDeleteCall('RAYS', KeyToDelete, 0); END LOOP;  CLOSE CRS1; END;",
		"CREATE OR REPLACE TRIGGER  ILIVESTREAM228340 BEFORE INSERT ON LIVESTREAM FOR EACH ROW DECLARE DELETEKEY CLOB; KEYTODELETE CLOB; DeleteIT_DLL_Val BINARY_INTEGER;  BEGIN  LIVESTREAM228340(:NEW.EDITED, :NEW.UPDATE_ID /*, DeleteKey*/);  END; ",
		"CREATE OR REPLACE TRIGGER  DLIVESTREAM228340 BEFORE DELETE ON LIVESTREAM FOR EACH ROW DECLARE DELETEKEY CLOB; KEYTODELETE CLOB; DeleteIT_DLL_Val BINARY_INTEGER;  BEGIN  LIVESTREAM228340(:OLD.EDITED, :OLD.UPDATE_ID /*, DeleteKey*/);  END; ",
		"CREATE OR REPLACE TRIGGER  ULIVESTREAM228340 BEFORE UPDATE ON LIVESTREAM FOR EACH ROW DECLARE DELETEKEY CLOB; KEYTODELETE CLOB; DeleteIT_DLL_Val BINARY_INTEGER;  BEGIN  LIVESTREAM228340(:OLD.EDITED, :OLD.UPDATE_ID /*, DeleteKey*/); IF (:NEW.EDITED <> :OLD.EDITED OR :NEW.UPDATE_ID <> :OLD.UPDATE_ID) THEN LIVESTREAM228340(:NEW.EDITED, :NEW.UPDATE_ID /*, DeleteKey*/);  END IF; END; ",
		"CREATE OR REPLACE PROCEDURE  CAMERA228340 (InArg1 IN CAMERA.CAMERA_ID%TYPE /*, DeleteKey IN OUT CLOB*/)  IS var1  USER_UPDATES.FRIEND_ID%TYPE; var2  LIVESTREAM.EDITED%TYPE;  TOKEN CLOB := TO_CLOB('UU.UPDATE_ID=LI.UPDATE_IDUU.CAMERA_ID=C.CAMERA_ID'); DeleteIT_DLL_Val BINARY_INTEGER; KeyToDelete CLOB;  CURSOR CRS1 IS SELECT USER_UPDATES.FRIEND_ID, LIVESTREAM.EDITED FROM USER_UPDATES, LIVESTREAM WHERE  USER_UPDATES.UPDATE_ID=LIVESTREAM.UPDATE_ID  AND USER_UPDATES.CAMERA_ID=InArg1;  BEGIN  OPEN CRS1;  LOOP  FETCH CRS1 into var1, var2;  EXIT WHEN CRS1%NOTFOUND; KeyToDelete := CONCAT(var1, CONCAT(var2, TOKEN)); DeleteIT_DLL_Val := KOSARTriggerDeleteCall('RAYS', KeyToDelete, 0); END LOOP;  CLOSE CRS1; END;",
		"CREATE OR REPLACE TRIGGER  ICAMERA228340 BEFORE INSERT ON CAMERA FOR EACH ROW DECLARE DELETEKEY CLOB; KEYTODELETE CLOB; DeleteIT_DLL_Val BINARY_INTEGER;  BEGIN  CAMERA228340(:NEW.CAMERA_ID /*, DeleteKey*/);  END; ",
		"CREATE OR REPLACE TRIGGER  DCAMERA228340 BEFORE DELETE ON CAMERA FOR EACH ROW DECLARE DELETEKEY CLOB; KEYTODELETE CLOB; DeleteIT_DLL_Val BINARY_INTEGER;  BEGIN  CAMERA228340(:OLD.CAMERA_ID /*, DeleteKey*/);  END; ",
		"CREATE OR REPLACE TRIGGER  UCAMERA228340 BEFORE UPDATE ON CAMERA FOR EACH ROW DECLARE DELETEKEY CLOB; KEYTODELETE CLOB; DeleteIT_DLL_Val BINARY_INTEGER;  BEGIN  CAMERA228340(:OLD.CAMERA_ID /*, DeleteKey*/); IF (:NEW.CAMERA_ID <> :OLD.CAMERA_ID) THEN CAMERA228340(:NEW.CAMERA_ID /*, DeleteKey*/);  END IF; END; ",
		"CREATE OR REPLACE PROCEDURE  USER_UPDATES2212040 (InArg1 IN USER_UPDATES.FRIEND_ID%TYPE, InArg2 IN USER_UPDATES.UPDATE_ID%TYPE, InArg3 IN USER_UPDATES.CAMERA_ID%TYPE /*, DeleteKey IN OUT CLOB*/)  IS var1  USER_UPDATES.FRIEND_ID%TYPE; var2  LIVESTREAM.EDITED%TYPE;  TOKEN CLOB := TO_CLOB('UU.UPDATE_ID=LI.UPDATE_IDUU.CAMERA_ID=C.CAMERA_ID'); DeleteIT_DLL_Val BINARY_INTEGER; KeyToDelete CLOB;  CURSOR CRS1 IS SELECT  InArg1, LIVESTREAM.EDITED FROM LIVESTREAM, CAMERA WHERE LIVESTREAM.UPDATE_ID=InArg2 AND CAMERA.CAMERA_ID=InArg3;  BEGIN  OPEN CRS1;  LOOP  FETCH CRS1 into var1, var2;  EXIT WHEN CRS1%NOTFOUND; KeyToDelete := CONCAT(var1, CONCAT(var2, TOKEN)); DeleteIT_DLL_Val := KOSARTriggerDeleteCall('RAYS', KeyToDelete, 0); END LOOP;  CLOSE CRS1; END;",
		"CREATE OR REPLACE TRIGGER  IUSER_UPDATES2212040 BEFORE INSERT ON USER_UPDATES FOR EACH ROW DECLARE DELETEKEY CLOB; KEYTODELETE CLOB; DeleteIT_DLL_Val BINARY_INTEGER;  BEGIN  USER_UPDATES2212040(:NEW.FRIEND_ID, :NEW.UPDATE_ID, :NEW.CAMERA_ID /*, DeleteKey*/);  END; ",
		"CREATE OR REPLACE TRIGGER  DUSER_UPDATES2212040 BEFORE DELETE ON USER_UPDATES FOR EACH ROW DECLARE DELETEKEY CLOB; KEYTODELETE CLOB; DeleteIT_DLL_Val BINARY_INTEGER;  BEGIN  USER_UPDATES2212040(:OLD.FRIEND_ID, :OLD.UPDATE_ID, :OLD.CAMERA_ID /*, DeleteKey*/);  END; ",
		"CREATE OR REPLACE TRIGGER  UUSER_UPDATES2212040 BEFORE UPDATE ON USER_UPDATES FOR EACH ROW DECLARE DELETEKEY CLOB; KEYTODELETE CLOB; DeleteIT_DLL_Val BINARY_INTEGER;  BEGIN  USER_UPDATES2212040(:OLD.FRIEND_ID, :OLD.UPDATE_ID, :OLD.CAMERA_ID /*, DeleteKey*/); IF (:NEW.FRIEND_ID <> :OLD.FRIEND_ID OR :NEW.UPDATE_ID <> :OLD.UPDATE_ID OR :NEW.CAMERA_ID <> :OLD.CAMERA_ID) THEN USER_UPDATES2212040(:NEW.FRIEND_ID, :NEW.UPDATE_ID, :NEW.CAMERA_ID /*, DeleteKey*/);  END IF; END; ",
		"CREATE OR REPLACE PROCEDURE  LIVESTREAM2212040 (InArg1 IN LIVESTREAM.EDITED%TYPE, InArg2 IN LIVESTREAM.UPDATE_ID%TYPE /*, DeleteKey IN OUT CLOB*/)  IS var1  USER_UPDATES.FRIEND_ID%TYPE; var2  LIVESTREAM.EDITED%TYPE;  TOKEN CLOB := TO_CLOB('UU.UPDATE_ID=LI.UPDATE_IDUU.CAMERA_ID=C.CAMERA_ID'); DeleteIT_DLL_Val BINARY_INTEGER; KeyToDelete CLOB;  CURSOR CRS1 IS SELECT USER_UPDATES.FRIEND_ID,  InArg1 FROM USER_UPDATES, CAMERA WHERE USER_UPDATES.UPDATE_ID=InArg2 AND  USER_UPDATES.CAMERA_ID=CAMERA.CAMERA_ID ;  BEGIN  OPEN CRS1;  LOOP  FETCH CRS1 into var1, var2;  EXIT WHEN CRS1%NOTFOUND; KeyToDelete := CONCAT(var1, CONCAT(var2, TOKEN)); DeleteIT_DLL_Val := KOSARTriggerDeleteCall('RAYS', KeyToDelete, 0); END LOOP;  CLOSE CRS1; END;",
		"CREATE OR REPLACE TRIGGER  ILIVESTREAM2212040 BEFORE INSERT ON LIVESTREAM FOR EACH ROW DECLARE DELETEKEY CLOB; KEYTODELETE CLOB; DeleteIT_DLL_Val BINARY_INTEGER;  BEGIN  LIVESTREAM2212040(:NEW.EDITED, :NEW.UPDATE_ID /*, DeleteKey*/);  END; ",
		"CREATE OR REPLACE TRIGGER  DLIVESTREAM2212040 BEFORE DELETE ON LIVESTREAM FOR EACH ROW DECLARE DELETEKEY CLOB; KEYTODELETE CLOB; DeleteIT_DLL_Val BINARY_INTEGER;  BEGIN  LIVESTREAM2212040(:OLD.EDITED, :OLD.UPDATE_ID /*, DeleteKey*/);  END; ",
		"CREATE OR REPLACE TRIGGER  ULIVESTREAM2212040 BEFORE UPDATE ON LIVESTREAM FOR EACH ROW DECLARE DELETEKEY CLOB; KEYTODELETE CLOB; DeleteIT_DLL_Val BINARY_INTEGER;  BEGIN  LIVESTREAM2212040(:OLD.EDITED, :OLD.UPDATE_ID /*, DeleteKey*/); IF (:NEW.EDITED <> :OLD.EDITED OR :NEW.UPDATE_ID <> :OLD.UPDATE_ID) THEN LIVESTREAM2212040(:NEW.EDITED, :NEW.UPDATE_ID /*, DeleteKey*/);  END IF; END; ",
		"CREATE OR REPLACE PROCEDURE  CAMERA2212040 (InArg1 IN CAMERA.CAMERA_ID%TYPE /*, DeleteKey IN OUT CLOB*/)  IS var1  USER_UPDATES.FRIEND_ID%TYPE; var2  LIVESTREAM.EDITED%TYPE;  TOKEN CLOB := TO_CLOB('UU.UPDATE_ID=LI.UPDATE_IDUU.CAMERA_ID=C.CAMERA_ID'); DeleteIT_DLL_Val BINARY_INTEGER; KeyToDelete CLOB;  CURSOR CRS1 IS SELECT USER_UPDATES.FRIEND_ID, LIVESTREAM.EDITED FROM USER_UPDATES, LIVESTREAM WHERE  USER_UPDATES.UPDATE_ID=LIVESTREAM.UPDATE_ID  AND USER_UPDATES.CAMERA_ID=InArg1;  BEGIN  OPEN CRS1;  LOOP  FETCH CRS1 into var1, var2;  EXIT WHEN CRS1%NOTFOUND; KeyToDelete := CONCAT(var1, CONCAT(var2, TOKEN)); DeleteIT_DLL_Val := KOSARTriggerDeleteCall('RAYS', KeyToDelete, 0); END LOOP;  CLOSE CRS1; END;",
		"CREATE OR REPLACE TRIGGER  ICAMERA2212040 BEFORE INSERT ON CAMERA FOR EACH ROW DECLARE DELETEKEY CLOB; KEYTODELETE CLOB; DeleteIT_DLL_Val BINARY_INTEGER;  BEGIN  CAMERA2212040(:NEW.CAMERA_ID /*, DeleteKey*/);  END; ",
		"CREATE OR REPLACE TRIGGER  DCAMERA2212040 BEFORE DELETE ON CAMERA FOR EACH ROW DECLARE DELETEKEY CLOB; KEYTODELETE CLOB; DeleteIT_DLL_Val BINARY_INTEGER;  BEGIN  CAMERA2212040(:OLD.CAMERA_ID /*, DeleteKey*/);  END; ",
		"CREATE OR REPLACE TRIGGER  UCAMERA2212040 BEFORE UPDATE ON CAMERA FOR EACH ROW DECLARE DELETEKEY CLOB; KEYTODELETE CLOB; DeleteIT_DLL_Val BINARY_INTEGER;  BEGIN  CAMERA2212040(:OLD.CAMERA_ID /*, DeleteKey*/); IF (:NEW.CAMERA_ID <> :OLD.CAMERA_ID) THEN CAMERA2212040(:NEW.CAMERA_ID /*, DeleteKey*/);  END IF; END; ",
		"CREATE OR REPLACE PROCEDURE  RECOMMENDED_VIDEOS1221545 (arg1 IN RECOMMENDED_VIDEOS.RECOMMENDED_TO%TYPE/*, DeleteKey IN OUT CLOB*/) IS TOKEN CLOB := TO_CLOB('UC.VIRTUAL_CLIP_ID=RV.VIRTUAL_CLIP_IDU.USER_ID=RV.RECOMMENDED_TO');DeleteIT_DLL_Val BINARY_INTEGER;KeyToDelete CLOB; BEGIN KeyToDelete := CONCAT(arg1, TOKEN); DeleteIT_DLL_Val := KOSARTriggerDeleteCall('RAYS', KeyToDelete, 0);END;",
		"CREATE OR REPLACE TRIGGER  IRECOMMENDED_VIDEOS1221545 BEFORE INSERT ON RECOMMENDED_VIDEOS FOR EACH ROW DECLARE DELETEKEY CLOB; KEYTODELETE CLOB; DeleteIT_DLL_Val BINARY_INTEGER;  BEGIN  RECOMMENDED_VIDEOS1221545(:NEW.RECOMMENDED_TO /*, DeleteKey*/);  END; ",
		"CREATE OR REPLACE TRIGGER  DRECOMMENDED_VIDEOS1221545 BEFORE DELETE ON RECOMMENDED_VIDEOS FOR EACH ROW DECLARE DELETEKEY CLOB; KEYTODELETE CLOB; DeleteIT_DLL_Val BINARY_INTEGER;  BEGIN  RECOMMENDED_VIDEOS1221545(:OLD.RECOMMENDED_TO /*, DeleteKey*/);  END; ",
		"CREATE OR REPLACE TRIGGER  URECOMMENDED_VIDEOS1221545 BEFORE UPDATE ON RECOMMENDED_VIDEOS FOR EACH ROW DECLARE DELETEKEY CLOB; KEYTODELETE CLOB; DeleteIT_DLL_Val BINARY_INTEGER;  BEGIN  RECOMMENDED_VIDEOS1221545(:OLD.RECOMMENDED_TO /*, DeleteKey*/); IF (:NEW.RECOMMENDED_TO <> :OLD.RECOMMENDED_TO) THEN RECOMMENDED_VIDEOS1221545(:New.RECOMMENDED_TO /*, DeleteKey*/);  END IF; END; ",
		"CREATE OR REPLACE PROCEDURE  USER_CLIPS1221545 (InArg1 IN USER_CLIPS.VIRTUAL_CLIP_ID%TYPE /*, DeleteKey IN OUT CLOB*/)  IS var1  RECOMMENDED_VIDEOS.RECOMMENDED_TO%TYPE;  TOKEN CLOB := TO_CLOB('UC.VIRTUAL_CLIP_ID=RV.VIRTUAL_CLIP_IDU.USER_ID=RV.RECOMMENDED_TO'); DeleteIT_DLL_Val BINARY_INTEGER; KeyToDelete CLOB;  CURSOR CRS1 IS SELECT RECOMMENDED_VIDEOS.RECOMMENDED_TO FROM USERS, RECOMMENDED_VIDEOS WHERE RECOMMENDED_VIDEOS.VIRTUAL_CLIP_ID=InArg1 AND  USERS.USER_ID=RECOMMENDED_VIDEOS.RECOMMENDED_TO ;  BEGIN  OPEN CRS1;  LOOP  FETCH CRS1 into var1;  EXIT WHEN CRS1%NOTFOUND; KeyToDelete := CONCAT(var1, TOKEN); DeleteIT_DLL_Val := KOSARTriggerDeleteCall('RAYS', KeyToDelete, 0); END LOOP;  CLOSE CRS1; END;",
		"CREATE OR REPLACE TRIGGER  IUSER_CLIPS1221545 BEFORE INSERT ON USER_CLIPS FOR EACH ROW DECLARE DELETEKEY CLOB; KEYTODELETE CLOB; DeleteIT_DLL_Val BINARY_INTEGER;  BEGIN  USER_CLIPS1221545(:NEW.VIRTUAL_CLIP_ID /*, DeleteKey*/);  END; ",
		"CREATE OR REPLACE TRIGGER  DUSER_CLIPS1221545 BEFORE DELETE ON USER_CLIPS FOR EACH ROW DECLARE DELETEKEY CLOB; KEYTODELETE CLOB; DeleteIT_DLL_Val BINARY_INTEGER;  BEGIN  USER_CLIPS1221545(:OLD.VIRTUAL_CLIP_ID /*, DeleteKey*/);  END; ",
		"CREATE OR REPLACE TRIGGER  UUSER_CLIPS1221545 BEFORE UPDATE ON USER_CLIPS FOR EACH ROW DECLARE DELETEKEY CLOB; KEYTODELETE CLOB; DeleteIT_DLL_Val BINARY_INTEGER;  BEGIN  USER_CLIPS1221545(:OLD.VIRTUAL_CLIP_ID /*, DeleteKey*/); IF (:NEW.VIRTUAL_CLIP_ID <> :OLD.VIRTUAL_CLIP_ID) THEN USER_CLIPS1221545(:NEW.VIRTUAL_CLIP_ID /*, DeleteKey*/);  END IF; END; ",
		"CREATE OR REPLACE PROCEDURE  USERS1221545 (InArg1 IN USERS.USER_ID%TYPE /*, DeleteKey IN OUT CLOB*/)  IS var1  RECOMMENDED_VIDEOS.RECOMMENDED_TO%TYPE;  TOKEN CLOB := TO_CLOB('UC.VIRTUAL_CLIP_ID=RV.VIRTUAL_CLIP_IDU.USER_ID=RV.RECOMMENDED_TO'); DeleteIT_DLL_Val BINARY_INTEGER; KeyToDelete CLOB;  CURSOR CRS1 IS SELECT RECOMMENDED_VIDEOS.RECOMMENDED_TO FROM USER_CLIPS, RECOMMENDED_VIDEOS WHERE  USER_CLIPS.VIRTUAL_CLIP_ID=RECOMMENDED_VIDEOS.VIRTUAL_CLIP_ID  AND RECOMMENDED_VIDEOS.RECOMMENDED_TO=InArg1;  BEGIN  OPEN CRS1;  LOOP  FETCH CRS1 into var1;  EXIT WHEN CRS1%NOTFOUND; KeyToDelete := CONCAT(var1, TOKEN); DeleteIT_DLL_Val := KOSARTriggerDeleteCall('RAYS', KeyToDelete, 0); END LOOP;  CLOSE CRS1; END;",
		"CREATE OR REPLACE TRIGGER  IUSERS1221545 BEFORE INSERT ON USERS FOR EACH ROW DECLARE DELETEKEY CLOB; KEYTODELETE CLOB; DeleteIT_DLL_Val BINARY_INTEGER;  BEGIN  USERS1221545(:NEW.USER_ID /*, DeleteKey*/);  END; ",
		"CREATE OR REPLACE TRIGGER  DUSERS1221545 BEFORE DELETE ON USERS FOR EACH ROW DECLARE DELETEKEY CLOB; KEYTODELETE CLOB; DeleteIT_DLL_Val BINARY_INTEGER;  BEGIN  USERS1221545(:OLD.USER_ID /*, DeleteKey*/);  END; ",
		"CREATE OR REPLACE TRIGGER  UUSERS1221545 BEFORE UPDATE ON USERS FOR EACH ROW DECLARE DELETEKEY CLOB; KEYTODELETE CLOB; DeleteIT_DLL_Val BINARY_INTEGER;  BEGIN  USERS1221545(:OLD.USER_ID /*, DeleteKey*/); IF (:NEW.USER_ID <> :OLD.USER_ID) THEN USERS1221545(:NEW.USER_ID /*, DeleteKey*/);  END IF; END; ",
		"CREATE OR REPLACE TRIGGER  Uuser_cameras002112712 BEFORE UPDATE ON user_cameras FOR EACH ROW DECLARE DeleteIT_DLL_Val BINARY_INTEGER; KeyToDelete  CLOB; /* DeleteKey CLOB; */ BEGIN KeyToDelete := ' ';  IF (:OLD.is_streaming <> :NEW.is_streaming OR :OLD.USER_ID <> :NEW.USER_ID) THEN  KeyToDelete := CONCAT('_12',:OLD.USER_ID); DeleteIT_DLL_Val := KOSARTriggerDeleteCall('RAYS', KeyToDelete, 0); END IF; END;",
		"CREATE OR REPLACE TRIGGER  Duser_cameras002112712 BEFORE DELETE ON user_cameras FOR EACH ROW DECLARE DeleteIT_DLL_Val BINARY_INTEGER; KeyToDelete  CLOB; /* DeleteKey CLOB; */ BEGIN KeyToDelete := ' ';  KeyToDelete := CONCAT('_12',:OLD.USER_ID);DeleteIT_DLL_Val := KOSARTriggerDeleteCall('RAYS', KeyToDelete, 0); END;",
		"CREATE OR REPLACE TRIGGER  Iuser_cameras002112712 BEFORE INSERT ON user_cameras FOR EACH ROW DECLARE DeleteIT_DLL_Val BINARY_INTEGER; KeyToDelete  CLOB; /* DeleteKey CLOB; */ BEGIN KeyToDelete := ' ';  KeyToDelete := CONCAT('_12',:NEW.USER_ID); DeleteIT_DLL_Val := KOSARTriggerDeleteCall('RAYS', KeyToDelete, 0); END;",
		"CREATE OR REPLACE TRIGGER  Ufriends1067666 BEFORE UPDATE ON friends FOR EACH ROW DECLARE DeleteIT_DLL_Val BINARY_INTEGER; KeyToDelete  CLOB; /* DeleteKey CLOB; */ BEGIN KeyToDelete := ' ';  IF (:OLD.userid <> :NEW.userid OR :OLD.STATUS <> :NEW.STATUS) THEN  KeyToDelete := CONCAT('_6',CONCAT(:OLD.STATUS, :OLD.USERID)); DeleteIT_DLL_Val := KOSARTriggerDeleteCall('RAYS', KeyToDelete, 0); END IF; END;",
		"CREATE OR REPLACE TRIGGER  Dfriends1067666 BEFORE DELETE ON friends FOR EACH ROW DECLARE DeleteIT_DLL_Val BINARY_INTEGER; KeyToDelete  CLOB; /* DeleteKey CLOB; */ BEGIN KeyToDelete := ' ';  KeyToDelete := CONCAT('_6',CONCAT(:OLD.STATUS, :OLD.USERID));DeleteIT_DLL_Val := KOSARTriggerDeleteCall('RAYS', KeyToDelete, 0); END;",
		"CREATE OR REPLACE TRIGGER  Ifriends1067666 BEFORE INSERT ON friends FOR EACH ROW DECLARE DeleteIT_DLL_Val BINARY_INTEGER; KeyToDelete  CLOB; /* DeleteKey CLOB; */ BEGIN KeyToDelete := ' ';  KeyToDelete := CONCAT('_6',CONCAT(:NEW.STATUS, :NEW.USERID)); DeleteIT_DLL_Val := KOSARTriggerDeleteCall('RAYS', KeyToDelete, 0); END;",
		"CREATE OR REPLACE TRIGGER  Ufriends1067866 BEFORE UPDATE ON friends FOR EACH ROW DECLARE DeleteIT_DLL_Val BINARY_INTEGER; KeyToDelete  CLOB; /* DeleteKey CLOB; */ BEGIN KeyToDelete := ' ';  IF (:OLD.userid <> :NEW.userid OR :OLD.FRIENDID <> :NEW.FRIENDID OR :OLD.STATUS <> :NEW.STATUS) THEN  KeyToDelete := CONCAT('_6',CONCAT(:OLD.FRIENDID, :OLD.STATUS)); DeleteIT_DLL_Val := KOSARTriggerDeleteCall('RAYS', KeyToDelete, 0); END IF; END;",
		"CREATE OR REPLACE TRIGGER  Dfriends1067866 BEFORE DELETE ON friends FOR EACH ROW DECLARE DeleteIT_DLL_Val BINARY_INTEGER; KeyToDelete  CLOB; /* DeleteKey CLOB; */ BEGIN KeyToDelete := ' ';  KeyToDelete := CONCAT('_6',CONCAT(:OLD.FRIENDID, :OLD.STATUS));DeleteIT_DLL_Val := KOSARTriggerDeleteCall('RAYS', KeyToDelete, 0); END;",
		"CREATE OR REPLACE TRIGGER  Ifriends1067866 BEFORE INSERT ON friends FOR EACH ROW DECLARE DeleteIT_DLL_Val BINARY_INTEGER; KeyToDelete  CLOB; /* DeleteKey CLOB; */ BEGIN KeyToDelete := ' ';  KeyToDelete := CONCAT('_6',CONCAT(:NEW.FRIENDID, :NEW.STATUS)); DeleteIT_DLL_Val := KOSARTriggerDeleteCall('RAYS', KeyToDelete, 0); END;",
		"CREATE OR REPLACE TRIGGER  Uuser_updates2091281099 BEFORE UPDATE ON user_updates FOR EACH ROW DECLARE DeleteIT_DLL_Val BINARY_INTEGER; KeyToDelete  CLOB; /* DeleteKey CLOB; */ BEGIN KeyToDelete := ' ';  IF (:OLD.friend_id <> :NEW.friend_id OR :OLD.ACCEPTED <> :NEW.ACCEPTED OR :OLD.EXPDELETER <> :NEW.EXPDELETER) THEN  KeyToDelete := CONCAT('_9',CONCAT(:OLD.ACCEPTED, CONCAT(:OLD.EXPDELETER, :OLD.FRIEND_ID))); DeleteIT_DLL_Val := KOSARTriggerDeleteCall('RAYS', KeyToDelete, 0); END IF; END;",
		"CREATE OR REPLACE TRIGGER  Duser_updates2091281099 BEFORE DELETE ON user_updates FOR EACH ROW DECLARE DeleteIT_DLL_Val BINARY_INTEGER; KeyToDelete  CLOB; /* DeleteKey CLOB; */ BEGIN KeyToDelete := ' ';  KeyToDelete := CONCAT('_9',CONCAT(:OLD.ACCEPTED, CONCAT(:OLD.EXPDELETER, :OLD.FRIEND_ID)));DeleteIT_DLL_Val := KOSARTriggerDeleteCall('RAYS', KeyToDelete, 0); END;",
		"CREATE OR REPLACE TRIGGER  Iuser_updates2091281099 BEFORE INSERT ON user_updates FOR EACH ROW DECLARE DeleteIT_DLL_Val BINARY_INTEGER; KeyToDelete  CLOB; /* DeleteKey CLOB; */ BEGIN KeyToDelete := ' ';  KeyToDelete := CONCAT('_9',CONCAT(:NEW.ACCEPTED, CONCAT(:NEW.EXPDELETER, :NEW.FRIEND_ID))); DeleteIT_DLL_Val := KOSARTriggerDeleteCall('RAYS', KeyToDelete, 0); END;",
		"CREATE OR REPLACE TRIGGER  Uuser_updates209128779 BEFORE UPDATE ON user_updates FOR EACH ROW DECLARE DeleteIT_DLL_Val BINARY_INTEGER; KeyToDelete  CLOB; /* DeleteKey CLOB; */ BEGIN KeyToDelete := ' ';  IF (:OLD.friend_id <> :NEW.friend_id OR :OLD.ACCEPTED <> :NEW.ACCEPTED OR :OLD.DELETES <> :NEW.DELETES OR :OLD.USER_ID <> :NEW.USER_ID) THEN  KeyToDelete := CONCAT('_9',CONCAT(:OLD.ACCEPTED, CONCAT(:OLD.DELETES, :OLD.USER_ID))); DeleteIT_DLL_Val := KOSARTriggerDeleteCall('RAYS', KeyToDelete, 0); END IF; END;",
		"CREATE OR REPLACE TRIGGER  Duser_updates209128779 BEFORE DELETE ON user_updates FOR EACH ROW DECLARE DeleteIT_DLL_Val BINARY_INTEGER; KeyToDelete  CLOB; /* DeleteKey CLOB; */ BEGIN KeyToDelete := ' ';  KeyToDelete := CONCAT('_9',CONCAT(:OLD.ACCEPTED, CONCAT(:OLD.DELETES, :OLD.USER_ID)));DeleteIT_DLL_Val := KOSARTriggerDeleteCall('RAYS', KeyToDelete, 0); END;",
		"CREATE OR REPLACE TRIGGER  Iuser_updates209128779 BEFORE INSERT ON user_updates FOR EACH ROW DECLARE DeleteIT_DLL_Val BINARY_INTEGER; KeyToDelete  CLOB; /* DeleteKey CLOB; */ BEGIN KeyToDelete := ' ';  KeyToDelete := CONCAT('_9',CONCAT(:NEW.ACCEPTED, CONCAT(:NEW.DELETES, :NEW.USER_ID))); DeleteIT_DLL_Val := KOSARTriggerDeleteCall('RAYS', KeyToDelete, 0); END;",
		"CREATE OR REPLACE TRIGGER  Uuser_updates30912871079 BEFORE UPDATE ON user_updates FOR EACH ROW DECLARE DeleteIT_DLL_Val BINARY_INTEGER; KeyToDelete  CLOB; /* DeleteKey CLOB; */ BEGIN KeyToDelete := ' ';  IF (:OLD.friend_id <> :NEW.friend_id OR :OLD.ACCEPTED <> :NEW.ACCEPTED OR :OLD.DELETES <> :NEW.DELETES OR :OLD.EXPDELETES <> :NEW.EXPDELETES OR :OLD.USER_ID <> :NEW.USER_ID) THEN  KeyToDelete := CONCAT('_9',CONCAT(:OLD.ACCEPTED, CONCAT(:OLD.DELETES, CONCAT(:OLD.EXPDELETES, :OLD.USER_ID)))); DeleteIT_DLL_Val := KOSARTriggerDeleteCall('RAYS', KeyToDelete, 0); END IF; END;",
		"CREATE OR REPLACE TRIGGER  Duser_updates30912871079 BEFORE DELETE ON user_updates FOR EACH ROW DECLARE DeleteIT_DLL_Val BINARY_INTEGER; KeyToDelete  CLOB; /* DeleteKey CLOB; */ BEGIN KeyToDelete := ' ';  KeyToDelete := CONCAT('_9',CONCAT(:OLD.ACCEPTED, CONCAT(:OLD.DELETES, CONCAT(:OLD.EXPDELETES, :OLD.USER_ID))));DeleteIT_DLL_Val := KOSARTriggerDeleteCall('RAYS', KeyToDelete, 0); END;",
		"CREATE OR REPLACE TRIGGER  Iuser_updates30912871079 BEFORE INSERT ON user_updates FOR EACH ROW DECLARE DeleteIT_DLL_Val BINARY_INTEGER; KeyToDelete  CLOB; /* DeleteKey CLOB; */ BEGIN KeyToDelete := ' ';  KeyToDelete := CONCAT('_9',CONCAT(:NEW.ACCEPTED, CONCAT(:NEW.DELETES, CONCAT(:NEW.EXPDELETES, :NEW.USER_ID)))); DeleteIT_DLL_Val := KOSARTriggerDeleteCall('RAYS', KeyToDelete, 0); END;",
		"CREATE OR REPLACE TRIGGER  Uuser_updates207712810991275 BEFORE UPDATE ON user_updates FOR EACH ROW DECLARE DeleteIT_DLL_Val BINARY_INTEGER; KeyToDelete  CLOB; /* DeleteKey CLOB; */ BEGIN KeyToDelete := ' ';  IF (:OLD.update_id <> :NEW.update_id OR :OLD.refupdate_id <> :NEW.refupdate_id OR :OLD.user_id <> :NEW.user_id OR :OLD.umode <> :NEW.umode OR :OLD.camera_id <> :NEW.camera_id OR :OLD.enddate <> :NEW.enddate OR :OLD.startdate <> :NEW.startdate OR :OLD.ACCEPTED <> :NEW.ACCEPTED OR :OLD.EXPDELETER <> :NEW.EXPDELETER OR :OLD.FRIEND_ID <> :NEW.FRIEND_ID) THEN  KeyToDelete := CONCAT('_91275979',CONCAT(:OLD.ACCEPTED, CONCAT(:OLD.EXPDELETER, :OLD.FRIEND_ID))); DeleteIT_DLL_Val := KOSARTriggerDeleteCall('RAYS', KeyToDelete, 0); END IF; END;",
		"CREATE OR REPLACE TRIGGER  Duser_updates207712810991275 BEFORE DELETE ON user_updates FOR EACH ROW DECLARE DeleteIT_DLL_Val BINARY_INTEGER; KeyToDelete  CLOB; /* DeleteKey CLOB; */ BEGIN KeyToDelete := ' ';  KeyToDelete := CONCAT('_91275979',CONCAT(:OLD.ACCEPTED, CONCAT(:OLD.EXPDELETER, :OLD.FRIEND_ID)));DeleteIT_DLL_Val := KOSARTriggerDeleteCall('RAYS', KeyToDelete, 0); END;",
		"CREATE OR REPLACE TRIGGER  Iuser_updates207712810991275 BEFORE INSERT ON user_updates FOR EACH ROW DECLARE DeleteIT_DLL_Val BINARY_INTEGER; KeyToDelete  CLOB; /* DeleteKey CLOB; */ BEGIN KeyToDelete := ' ';  KeyToDelete := CONCAT('_91275979',CONCAT(:NEW.ACCEPTED, CONCAT(:NEW.EXPDELETER, :NEW.FRIEND_ID))); DeleteIT_DLL_Val := KOSARTriggerDeleteCall('RAYS', KeyToDelete, 0); END;",
		"CREATE OR REPLACE TRIGGER  Uuser_updates20471281096678 BEFORE UPDATE ON user_updates FOR EACH ROW DECLARE DeleteIT_DLL_Val BINARY_INTEGER; KeyToDelete  CLOB; /* DeleteKey CLOB; */ BEGIN KeyToDelete := ' ';  IF (:OLD.endmin <> :NEW.endmin OR :OLD.endsec <> :NEW.endsec OR :OLD.starthr <> :NEW.starthr OR :OLD.startmin <> :NEW.startmin OR :OLD.startsec <> :NEW.startsec OR :OLD.ACCEPTED <> :NEW.ACCEPTED OR :OLD.EXPDELETER <> :NEW.EXPDELETER OR :OLD.FRIEND_ID <> :NEW.FRIEND_ID) THEN  KeyToDelete := CONCAT('_66788',CONCAT(:OLD.ACCEPTED, CONCAT(:OLD.EXPDELETER, :OLD.FRIEND_ID))); DeleteIT_DLL_Val := KOSARTriggerDeleteCall('RAYS', KeyToDelete, 0); END IF; END;",
		"CREATE OR REPLACE TRIGGER  Duser_updates20471281096678 BEFORE DELETE ON user_updates FOR EACH ROW DECLARE DeleteIT_DLL_Val BINARY_INTEGER; KeyToDelete  CLOB; /* DeleteKey CLOB; */ BEGIN KeyToDelete := ' ';  KeyToDelete := CONCAT('_66788',CONCAT(:OLD.ACCEPTED, CONCAT(:OLD.EXPDELETER, :OLD.FRIEND_ID)));DeleteIT_DLL_Val := KOSARTriggerDeleteCall('RAYS', KeyToDelete, 0); END;",
		"CREATE OR REPLACE TRIGGER  Iuser_updates20471281096678 BEFORE INSERT ON user_updates FOR EACH ROW DECLARE DeleteIT_DLL_Val BINARY_INTEGER; KeyToDelete  CLOB; /* DeleteKey CLOB; */ BEGIN KeyToDelete := ' ';  KeyToDelete := CONCAT('_66788',CONCAT(:NEW.ACCEPTED, CONCAT(:NEW.EXPDELETER, :NEW.FRIEND_ID))); DeleteIT_DLL_Val := KOSARTriggerDeleteCall('RAYS', KeyToDelete, 0); END;",
		"CREATE OR REPLACE TRIGGER  Uuser_updates20101281094 BEFORE UPDATE ON user_updates FOR EACH ROW DECLARE DeleteIT_DLL_Val BINARY_INTEGER; KeyToDelete  CLOB; /* DeleteKey CLOB; */ BEGIN KeyToDelete := ' ';  IF (:OLD.dmin <> :NEW.dmin OR :OLD.ACCEPTED <> :NEW.ACCEPTED OR :OLD.EXPDELETER <> :NEW.EXPDELETER OR :OLD.FRIEND_ID <> :NEW.FRIEND_ID) THEN  KeyToDelete := CONCAT('_4',CONCAT(:OLD.ACCEPTED, CONCAT(:OLD.EXPDELETER, :OLD.FRIEND_ID))); DeleteIT_DLL_Val := KOSARTriggerDeleteCall('RAYS', KeyToDelete, 0); END IF; END;",
		"CREATE OR REPLACE TRIGGER  Duser_updates20101281094 BEFORE DELETE ON user_updates FOR EACH ROW DECLARE DeleteIT_DLL_Val BINARY_INTEGER; KeyToDelete  CLOB; /* DeleteKey CLOB; */ BEGIN KeyToDelete := ' ';  KeyToDelete := CONCAT('_4',CONCAT(:OLD.ACCEPTED, CONCAT(:OLD.EXPDELETER, :OLD.FRIEND_ID)));DeleteIT_DLL_Val := KOSARTriggerDeleteCall('RAYS', KeyToDelete, 0); END;",
		"CREATE OR REPLACE TRIGGER  Iuser_updates20101281094 BEFORE INSERT ON user_updates FOR EACH ROW DECLARE DeleteIT_DLL_Val BINARY_INTEGER; KeyToDelete  CLOB; /* DeleteKey CLOB; */ BEGIN KeyToDelete := ' ';  KeyToDelete := CONCAT('_4',CONCAT(:NEW.ACCEPTED, CONCAT(:NEW.EXPDELETER, :NEW.FRIEND_ID))); DeleteIT_DLL_Val := KOSARTriggerDeleteCall('RAYS', KeyToDelete, 0); END;",
		"CREATE OR REPLACE TRIGGER  Ufriends1067666 BEFORE UPDATE ON friends FOR EACH ROW DECLARE DeleteIT_DLL_Val BINARY_INTEGER; KeyToDelete  CLOB; /* DeleteKey CLOB; */ BEGIN KeyToDelete := ' ';  IF (:OLD.userid <> :NEW.userid OR :OLD.STATUS <> :NEW.STATUS) THEN  KeyToDelete := CONCAT('_6',CONCAT(:OLD.STATUS, :OLD.USERID)); DeleteIT_DLL_Val := KOSARTriggerDeleteCall('RAYS', KeyToDelete, 0); END IF; END;",
		"CREATE OR REPLACE TRIGGER  Dfriends1067666 BEFORE DELETE ON friends FOR EACH ROW DECLARE DeleteIT_DLL_Val BINARY_INTEGER; KeyToDelete  CLOB; /* DeleteKey CLOB; */ BEGIN KeyToDelete := ' ';  KeyToDelete := CONCAT('_6',CONCAT(:OLD.STATUS, :OLD.USERID));DeleteIT_DLL_Val := KOSARTriggerDeleteCall('RAYS', KeyToDelete, 0); END;",
		"CREATE OR REPLACE TRIGGER  Ifriends1067666 BEFORE INSERT ON friends FOR EACH ROW DECLARE DeleteIT_DLL_Val BINARY_INTEGER; KeyToDelete  CLOB; /* DeleteKey CLOB; */ BEGIN KeyToDelete := ' ';  KeyToDelete := CONCAT('_6',CONCAT(:NEW.STATUS, :NEW.USERID)); DeleteIT_DLL_Val := KOSARTriggerDeleteCall('RAYS', KeyToDelete, 0); END;",
		"CREATE OR REPLACE TRIGGER  Ufriends1067866 BEFORE UPDATE ON friends FOR EACH ROW DECLARE DeleteIT_DLL_Val BINARY_INTEGER; KeyToDelete  CLOB; /* DeleteKey CLOB; */ BEGIN KeyToDelete := ' ';  IF (:OLD.userid <> :NEW.userid OR :OLD.FRIENDID <> :NEW.FRIENDID OR :OLD.STATUS <> :NEW.STATUS) THEN  KeyToDelete := CONCAT('_6',CONCAT(:OLD.FRIENDID, :OLD.STATUS)); DeleteIT_DLL_Val := KOSARTriggerDeleteCall('RAYS', KeyToDelete, 0); END IF; END;",
		"CREATE OR REPLACE TRIGGER  Dfriends1067866 BEFORE DELETE ON friends FOR EACH ROW DECLARE DeleteIT_DLL_Val BINARY_INTEGER; KeyToDelete  CLOB; /* DeleteKey CLOB; */ BEGIN KeyToDelete := ' ';  KeyToDelete := CONCAT('_6',CONCAT(:OLD.FRIENDID, :OLD.STATUS));DeleteIT_DLL_Val := KOSARTriggerDeleteCall('RAYS', KeyToDelete, 0); END;",
		"CREATE OR REPLACE TRIGGER  Ifriends1067866 BEFORE INSERT ON friends FOR EACH ROW DECLARE DeleteIT_DLL_Val BINARY_INTEGER; KeyToDelete  CLOB; /* DeleteKey CLOB; */ BEGIN KeyToDelete := ' ';  KeyToDelete := CONCAT('_6',CONCAT(:NEW.FRIENDID, :NEW.STATUS)); DeleteIT_DLL_Val := KOSARTriggerDeleteCall('RAYS', KeyToDelete, 0); END;",
		"CREATE OR REPLACE TRIGGER  Ufriends10149866 BEFORE UPDATE ON friends FOR EACH ROW DECLARE DeleteIT_DLL_Val BINARY_INTEGER; KeyToDelete  CLOB; /* DeleteKey CLOB; */ BEGIN KeyToDelete := ' ';  IF (:OLD.userid <> :NEW.userid OR :OLD.FRIENDID <> :NEW.FRIENDID OR :OLD.STATUS <> :NEW.STATUS) THEN  KeyToDelete := CONCAT('_6',CONCAT(:OLD.FRIENDID, :OLD.STATUS)); DeleteIT_DLL_Val := KOSARTriggerDeleteCall('RAYS', KeyToDelete, 0); END IF; END;",
		"CREATE OR REPLACE TRIGGER  Dfriends10149866 BEFORE DELETE ON friends FOR EACH ROW DECLARE DeleteIT_DLL_Val BINARY_INTEGER; KeyToDelete  CLOB; /* DeleteKey CLOB; */ BEGIN KeyToDelete := ' ';  KeyToDelete := CONCAT('_6',CONCAT(:OLD.FRIENDID, :OLD.STATUS));DeleteIT_DLL_Val := KOSARTriggerDeleteCall('RAYS', KeyToDelete, 0); END;",
		"CREATE OR REPLACE TRIGGER  Ifriends10149866 BEFORE INSERT ON friends FOR EACH ROW DECLARE DeleteIT_DLL_Val BINARY_INTEGER; KeyToDelete  CLOB; /* DeleteKey CLOB; */ BEGIN KeyToDelete := ' ';  KeyToDelete := CONCAT('_6',CONCAT(:NEW.FRIENDID, :NEW.STATUS)); DeleteIT_DLL_Val := KOSARTriggerDeleteCall('RAYS', KeyToDelete, 0); END;",
		"CREATE OR REPLACE PROCEDURE  FRIENDS211819 (arg1 IN FRIENDS.STATUS%TYPE, arg2 IN FRIENDS.FRIENDID%TYPE/*, DeleteKey IN OUT CLOB*/) IS TOKEN CLOB := TO_CLOB('U.USER_ID=F.USERID');DeleteIT_DLL_Val BINARY_INTEGER;KeyToDelete CLOB; BEGIN KeyToDelete := CONCAT(arg1, CONCAT(arg2, TOKEN)); DeleteIT_DLL_Val := KOSARTriggerDeleteCall('RAYS', KeyToDelete, 0);END;",
		"CREATE OR REPLACE TRIGGER  IFRIENDS211819 BEFORE INSERT ON FRIENDS FOR EACH ROW DECLARE DELETEKEY CLOB; KEYTODELETE CLOB; DeleteIT_DLL_Val BINARY_INTEGER;  BEGIN  FRIENDS211819(:NEW.STATUS, :NEW.FRIENDID /*, DeleteKey*/);  END; ",
		"CREATE OR REPLACE TRIGGER  DFRIENDS211819 BEFORE DELETE ON FRIENDS FOR EACH ROW DECLARE DELETEKEY CLOB; KEYTODELETE CLOB; DeleteIT_DLL_Val BINARY_INTEGER;  BEGIN  FRIENDS211819(:OLD.STATUS, :OLD.FRIENDID /*, DeleteKey*/);  END; ",
		"CREATE OR REPLACE TRIGGER  UFRIENDS211819 BEFORE UPDATE ON FRIENDS FOR EACH ROW DECLARE DELETEKEY CLOB; KEYTODELETE CLOB; DeleteIT_DLL_Val BINARY_INTEGER;  BEGIN  FRIENDS211819(:OLD.STATUS, :OLD.FRIENDID /*, DeleteKey*/); IF (:NEW.STATUS <> :OLD.STATUS OR :NEW.FRIENDID <> :OLD.FRIENDID) THEN FRIENDS211819(:New.STATUS, :New.FRIENDID /*, DeleteKey*/);  END IF; END; ",
		"CREATE OR REPLACE PROCEDURE  USERS211819 (InArg1 IN USERS.USER_ID%TYPE /*, DeleteKey IN OUT CLOB*/)  IS var1  FRIENDS.STATUS%TYPE; var2  FRIENDS.FRIENDID%TYPE;  TOKEN CLOB := TO_CLOB('U.USER_ID=F.USERID'); DeleteIT_DLL_Val BINARY_INTEGER; KeyToDelete CLOB;  CURSOR CRS1 IS SELECT FRIENDS.STATUS, FRIENDS.FRIENDID FROM FRIENDS WHERE FRIENDS.USERID=InArg1;  BEGIN  OPEN CRS1;  LOOP  FETCH CRS1 into var1, var2;  EXIT WHEN CRS1%NOTFOUND; KeyToDelete := CONCAT(var1, CONCAT(var2, TOKEN)); DeleteIT_DLL_Val := KOSARTriggerDeleteCall('RAYS', KeyToDelete, 0); END LOOP;  CLOSE CRS1; END;",
		"CREATE OR REPLACE TRIGGER  IUSERS211819 BEFORE INSERT ON USERS FOR EACH ROW DECLARE DELETEKEY CLOB; KEYTODELETE CLOB; DeleteIT_DLL_Val BINARY_INTEGER;  BEGIN  USERS211819(:NEW.USER_ID /*, DeleteKey*/);  END; ",
		"CREATE OR REPLACE TRIGGER  DUSERS211819 BEFORE DELETE ON USERS FOR EACH ROW DECLARE DELETEKEY CLOB; KEYTODELETE CLOB; DeleteIT_DLL_Val BINARY_INTEGER;  BEGIN  USERS211819(:OLD.USER_ID /*, DeleteKey*/);  END; ",
		"CREATE OR REPLACE TRIGGER  UUSERS211819 BEFORE UPDATE ON USERS FOR EACH ROW DECLARE DELETEKEY CLOB; KEYTODELETE CLOB; DeleteIT_DLL_Val BINARY_INTEGER;  BEGIN  USERS211819(:OLD.USER_ID /*, DeleteKey*/); IF (:NEW.USER_ID <> :OLD.USER_ID) THEN USERS211819(:NEW.USER_ID /*, DeleteKey*/);  END IF; END; ",
		"CREATE OR REPLACE PROCEDURE  FRIENDS212618 (arg1 IN FRIENDS.STATUS%TYPE, arg2 IN FRIENDS.USERID%TYPE/*, DeleteKey IN OUT CLOB*/) IS TOKEN CLOB := TO_CLOB('U.USER_ID=F.FRIENDID');DeleteIT_DLL_Val BINARY_INTEGER;KeyToDelete CLOB; BEGIN KeyToDelete := CONCAT(arg1, CONCAT(arg2, TOKEN)); DeleteIT_DLL_Val := KOSARTriggerDeleteCall('RAYS', KeyToDelete, 0);END;",
		"CREATE OR REPLACE TRIGGER  IFRIENDS212618 BEFORE INSERT ON FRIENDS FOR EACH ROW DECLARE DELETEKEY CLOB; KEYTODELETE CLOB; DeleteIT_DLL_Val BINARY_INTEGER;  BEGIN  FRIENDS212618(:NEW.STATUS, :NEW.USERID /*, DeleteKey*/);  END; ",
		"CREATE OR REPLACE TRIGGER  DFRIENDS212618 BEFORE DELETE ON FRIENDS FOR EACH ROW DECLARE DELETEKEY CLOB; KEYTODELETE CLOB; DeleteIT_DLL_Val BINARY_INTEGER;  BEGIN  FRIENDS212618(:OLD.STATUS, :OLD.USERID /*, DeleteKey*/);  END; ",
		"CREATE OR REPLACE TRIGGER  UFRIENDS212618 BEFORE UPDATE ON FRIENDS FOR EACH ROW DECLARE DELETEKEY CLOB; KEYTODELETE CLOB; DeleteIT_DLL_Val BINARY_INTEGER;  BEGIN  FRIENDS212618(:OLD.STATUS, :OLD.USERID /*, DeleteKey*/); IF (:NEW.STATUS <> :OLD.STATUS OR :NEW.USERID <> :OLD.USERID) THEN FRIENDS212618(:New.STATUS, :New.USERID /*, DeleteKey*/);  END IF; END; ",
		"CREATE OR REPLACE PROCEDURE  USERS212618 (InArg1 IN USERS.USER_ID%TYPE /*, DeleteKey IN OUT CLOB*/)  IS var1  FRIENDS.STATUS%TYPE; var2  FRIENDS.USERID%TYPE;  TOKEN CLOB := TO_CLOB('U.USER_ID=F.FRIENDID'); DeleteIT_DLL_Val BINARY_INTEGER; KeyToDelete CLOB;  CURSOR CRS1 IS SELECT FRIENDS.STATUS, FRIENDS.USERID FROM FRIENDS WHERE FRIENDS.FRIENDID=InArg1;  BEGIN  OPEN CRS1;  LOOP  FETCH CRS1 into var1, var2;  EXIT WHEN CRS1%NOTFOUND; KeyToDelete := CONCAT(var1, CONCAT(var2, TOKEN)); DeleteIT_DLL_Val := KOSARTriggerDeleteCall('RAYS', KeyToDelete, 0); END LOOP;  CLOSE CRS1; END;",
		"CREATE OR REPLACE TRIGGER  IUSERS212618 BEFORE INSERT ON USERS FOR EACH ROW DECLARE DELETEKEY CLOB; KEYTODELETE CLOB; DeleteIT_DLL_Val BINARY_INTEGER;  BEGIN  USERS212618(:NEW.USER_ID /*, DeleteKey*/);  END; ",
		"CREATE OR REPLACE TRIGGER  DUSERS212618 BEFORE DELETE ON USERS FOR EACH ROW DECLARE DELETEKEY CLOB; KEYTODELETE CLOB; DeleteIT_DLL_Val BINARY_INTEGER;  BEGIN  USERS212618(:OLD.USER_ID /*, DeleteKey*/);  END; ",
		"CREATE OR REPLACE TRIGGER  UUSERS212618 BEFORE UPDATE ON USERS FOR EACH ROW DECLARE DELETEKEY CLOB; KEYTODELETE CLOB; DeleteIT_DLL_Val BINARY_INTEGER;  BEGIN  USERS212618(:OLD.USER_ID /*, DeleteKey*/); IF (:NEW.USER_ID <> :OLD.USER_ID) THEN USERS212618(:NEW.USER_ID /*, DeleteKey*/);  END IF; END; ",
		"CREATE OR REPLACE TRIGGER  Uusers007577 BEFORE UPDATE ON users FOR EACH ROW DECLARE DeleteIT_DLL_Val BINARY_INTEGER; KeyToDelete  CLOB; /* DeleteKey CLOB; */ BEGIN KeyToDelete := ' ';  IF (:OLD.changed <> :NEW.changed OR :OLD.USER_ID <> :NEW.USER_ID) THEN  KeyToDelete := CONCAT('_7',:OLD.USER_ID); DeleteIT_DLL_Val := KOSARTriggerDeleteCall('RAYS', KeyToDelete, 0); END IF; END;",
		"CREATE OR REPLACE TRIGGER  Dusers007577 BEFORE DELETE ON users FOR EACH ROW DECLARE DeleteIT_DLL_Val BINARY_INTEGER; KeyToDelete  CLOB; /* DeleteKey CLOB; */ BEGIN KeyToDelete := ' ';  KeyToDelete := CONCAT('_7',:OLD.USER_ID);DeleteIT_DLL_Val := KOSARTriggerDeleteCall('RAYS', KeyToDelete, 0); END;",
		"CREATE OR REPLACE TRIGGER  Iusers007577 BEFORE INSERT ON users FOR EACH ROW DECLARE DeleteIT_DLL_Val BINARY_INTEGER; KeyToDelete  CLOB; /* DeleteKey CLOB; */ BEGIN KeyToDelete := ' ';  KeyToDelete := CONCAT('_7',:NEW.USER_ID); DeleteIT_DLL_Val := KOSARTriggerDeleteCall('RAYS', KeyToDelete, 0); END;",
		"CREATE OR REPLACE PROCEDURE  FRNDGROUP211227 (InArg1 IN FRNDGROUP.USER_ID%TYPE, InArg2 IN FRNDGROUP.GROUP_ID%TYPE /*, DeleteKey IN OUT CLOB*/)  IS var1  GRPMEMBERSHIP.FRIEND_ID%TYPE; var2  FRNDGROUP.USER_ID%TYPE;  TOKEN CLOB := TO_CLOB('F.GROUP_ID=G.GROUP_ID'); DeleteIT_DLL_Val BINARY_INTEGER; KeyToDelete CLOB;  CURSOR CRS1 IS SELECT GRPMEMBERSHIP.FRIEND_ID,  InArg1 FROM GRPMEMBERSHIP WHERE GRPMEMBERSHIP.GROUP_ID=InArg2;  BEGIN  OPEN CRS1;  LOOP  FETCH CRS1 into var1, var2;  EXIT WHEN CRS1%NOTFOUND; KeyToDelete := CONCAT(var1, CONCAT(var2, TOKEN)); DeleteIT_DLL_Val := KOSARTriggerDeleteCall('RAYS', KeyToDelete, 0); END LOOP;  CLOSE CRS1; END;",
		"CREATE OR REPLACE TRIGGER  IFRNDGROUP211227 BEFORE INSERT ON FRNDGROUP FOR EACH ROW DECLARE DELETEKEY CLOB; KEYTODELETE CLOB; DeleteIT_DLL_Val BINARY_INTEGER;  BEGIN  FRNDGROUP211227(:NEW.USER_ID, :NEW.GROUP_ID /*, DeleteKey*/);  END; ",
		"CREATE OR REPLACE TRIGGER  DFRNDGROUP211227 BEFORE DELETE ON FRNDGROUP FOR EACH ROW DECLARE DELETEKEY CLOB; KEYTODELETE CLOB; DeleteIT_DLL_Val BINARY_INTEGER;  BEGIN  FRNDGROUP211227(:OLD.USER_ID, :OLD.GROUP_ID /*, DeleteKey*/);  END; ",
		"CREATE OR REPLACE TRIGGER  UFRNDGROUP211227 BEFORE UPDATE ON FRNDGROUP FOR EACH ROW DECLARE DELETEKEY CLOB; KEYTODELETE CLOB; DeleteIT_DLL_Val BINARY_INTEGER;  BEGIN  FRNDGROUP211227(:OLD.USER_ID, :OLD.GROUP_ID /*, DeleteKey*/); IF (:NEW.USER_ID <> :OLD.USER_ID OR :NEW.GROUP_ID <> :OLD.GROUP_ID) THEN FRNDGROUP211227(:NEW.USER_ID, :NEW.GROUP_ID /*, DeleteKey*/);  END IF; END; ",
		"CREATE OR REPLACE PROCEDURE  GRPMEMBERSHIP211227 (InArg1 IN GRPMEMBERSHIP.FRIEND_ID%TYPE, InArg2 IN GRPMEMBERSHIP.GROUP_ID%TYPE /*, DeleteKey IN OUT CLOB*/)  IS var1  GRPMEMBERSHIP.FRIEND_ID%TYPE; var2  FRNDGROUP.USER_ID%TYPE;  TOKEN CLOB := TO_CLOB('F.GROUP_ID=G.GROUP_ID'); DeleteIT_DLL_Val BINARY_INTEGER; KeyToDelete CLOB;  CURSOR CRS1 IS SELECT  InArg1, FRNDGROUP.USER_ID FROM FRNDGROUP WHERE FRNDGROUP.GROUP_ID=InArg2;  BEGIN  OPEN CRS1;  LOOP  FETCH CRS1 into var1, var2;  EXIT WHEN CRS1%NOTFOUND; KeyToDelete := CONCAT(var1, CONCAT(var2, TOKEN)); DeleteIT_DLL_Val := KOSARTriggerDeleteCall('RAYS', KeyToDelete, 0); END LOOP;  CLOSE CRS1; END;",
		"CREATE OR REPLACE TRIGGER  IGRPMEMBERSHIP211227 BEFORE INSERT ON GRPMEMBERSHIP FOR EACH ROW DECLARE DELETEKEY CLOB; KEYTODELETE CLOB; DeleteIT_DLL_Val BINARY_INTEGER;  BEGIN  GRPMEMBERSHIP211227(:NEW.FRIEND_ID, :NEW.GROUP_ID /*, DeleteKey*/);  END; ",
		"CREATE OR REPLACE TRIGGER  DGRPMEMBERSHIP211227 BEFORE DELETE ON GRPMEMBERSHIP FOR EACH ROW DECLARE DELETEKEY CLOB; KEYTODELETE CLOB; DeleteIT_DLL_Val BINARY_INTEGER;  BEGIN  GRPMEMBERSHIP211227(:OLD.FRIEND_ID, :OLD.GROUP_ID /*, DeleteKey*/);  END; ",
		"CREATE OR REPLACE TRIGGER  UGRPMEMBERSHIP211227 BEFORE UPDATE ON GRPMEMBERSHIP FOR EACH ROW DECLARE DELETEKEY CLOB; KEYTODELETE CLOB; DeleteIT_DLL_Val BINARY_INTEGER;  BEGIN  GRPMEMBERSHIP211227(:OLD.FRIEND_ID, :OLD.GROUP_ID /*, DeleteKey*/); IF (:NEW.FRIEND_ID <> :OLD.FRIEND_ID OR :NEW.GROUP_ID <> :OLD.GROUP_ID) THEN GRPMEMBERSHIP211227(:NEW.FRIEND_ID, :NEW.GROUP_ID /*, DeleteKey*/);  END IF; END; ",
		"CREATE OR REPLACE TRIGGER  Uusers007577 BEFORE UPDATE ON users FOR EACH ROW DECLARE DeleteIT_DLL_Val BINARY_INTEGER; KeyToDelete  CLOB; /* DeleteKey CLOB; */ BEGIN KeyToDelete := ' ';  IF (:OLD.changed <> :NEW.changed OR :OLD.USER_ID <> :NEW.USER_ID) THEN  KeyToDelete := CONCAT('_7',:OLD.USER_ID); DeleteIT_DLL_Val := KOSARTriggerDeleteCall('RAYS', KeyToDelete, 0); END IF; END;",
		"CREATE OR REPLACE TRIGGER  Dusers007577 BEFORE DELETE ON users FOR EACH ROW DECLARE DeleteIT_DLL_Val BINARY_INTEGER; KeyToDelete  CLOB; /* DeleteKey CLOB; */ BEGIN KeyToDelete := ' ';  KeyToDelete := CONCAT('_7',:OLD.USER_ID);DeleteIT_DLL_Val := KOSARTriggerDeleteCall('RAYS', KeyToDelete, 0); END;",
		"CREATE OR REPLACE TRIGGER  Iusers007577 BEFORE INSERT ON users FOR EACH ROW DECLARE DeleteIT_DLL_Val BINARY_INTEGER; KeyToDelete  CLOB; /* DeleteKey CLOB; */ BEGIN KeyToDelete := ' ';  KeyToDelete := CONCAT('_7',:NEW.USER_ID); DeleteIT_DLL_Val := KOSARTriggerDeleteCall('RAYS', KeyToDelete, 0); END;",
		"CREATE OR REPLACE PROCEDURE  FRNDGROUP211227 (InArg1 IN FRNDGROUP.USER_ID%TYPE, InArg2 IN FRNDGROUP.GROUP_ID%TYPE /*, DeleteKey IN OUT CLOB*/)  IS var1  GRPMEMBERSHIP.FRIEND_ID%TYPE; var2  FRNDGROUP.USER_ID%TYPE;  TOKEN CLOB := TO_CLOB('F.GROUP_ID=G.GROUP_ID'); DeleteIT_DLL_Val BINARY_INTEGER; KeyToDelete CLOB;  CURSOR CRS1 IS SELECT GRPMEMBERSHIP.FRIEND_ID,  InArg1 FROM GRPMEMBERSHIP WHERE GRPMEMBERSHIP.GROUP_ID=InArg2;  BEGIN  OPEN CRS1;  LOOP  FETCH CRS1 into var1, var2;  EXIT WHEN CRS1%NOTFOUND; KeyToDelete := CONCAT(var1, CONCAT(var2, TOKEN)); DeleteIT_DLL_Val := KOSARTriggerDeleteCall('RAYS', KeyToDelete, 0); END LOOP;  CLOSE CRS1; END;",
		"CREATE OR REPLACE TRIGGER  IFRNDGROUP211227 BEFORE INSERT ON FRNDGROUP FOR EACH ROW DECLARE DELETEKEY CLOB; KEYTODELETE CLOB; DeleteIT_DLL_Val BINARY_INTEGER;  BEGIN  FRNDGROUP211227(:NEW.USER_ID, :NEW.GROUP_ID /*, DeleteKey*/);  END; ",
		"CREATE OR REPLACE TRIGGER  DFRNDGROUP211227 BEFORE DELETE ON FRNDGROUP FOR EACH ROW DECLARE DELETEKEY CLOB; KEYTODELETE CLOB; DeleteIT_DLL_Val BINARY_INTEGER;  BEGIN  FRNDGROUP211227(:OLD.USER_ID, :OLD.GROUP_ID /*, DeleteKey*/);  END; ",
		"CREATE OR REPLACE TRIGGER  UFRNDGROUP211227 BEFORE UPDATE ON FRNDGROUP FOR EACH ROW DECLARE DELETEKEY CLOB; KEYTODELETE CLOB; DeleteIT_DLL_Val BINARY_INTEGER;  BEGIN  FRNDGROUP211227(:OLD.USER_ID, :OLD.GROUP_ID /*, DeleteKey*/); IF (:NEW.USER_ID <> :OLD.USER_ID OR :NEW.GROUP_ID <> :OLD.GROUP_ID) THEN FRNDGROUP211227(:NEW.USER_ID, :NEW.GROUP_ID /*, DeleteKey*/);  END IF; END; ",
		"CREATE OR REPLACE PROCEDURE  GRPMEMBERSHIP211227 (InArg1 IN GRPMEMBERSHIP.FRIEND_ID%TYPE, InArg2 IN GRPMEMBERSHIP.GROUP_ID%TYPE /*, DeleteKey IN OUT CLOB*/)  IS var1  GRPMEMBERSHIP.FRIEND_ID%TYPE; var2  FRNDGROUP.USER_ID%TYPE;  TOKEN CLOB := TO_CLOB('F.GROUP_ID=G.GROUP_ID'); DeleteIT_DLL_Val BINARY_INTEGER; KeyToDelete CLOB;  CURSOR CRS1 IS SELECT  InArg1, FRNDGROUP.USER_ID FROM FRNDGROUP WHERE FRNDGROUP.GROUP_ID=InArg2;  BEGIN  OPEN CRS1;  LOOP  FETCH CRS1 into var1, var2;  EXIT WHEN CRS1%NOTFOUND; KeyToDelete := CONCAT(var1, CONCAT(var2, TOKEN)); DeleteIT_DLL_Val := KOSARTriggerDeleteCall('RAYS', KeyToDelete, 0); END LOOP;  CLOSE CRS1; END;",
		"CREATE OR REPLACE TRIGGER  IGRPMEMBERSHIP211227 BEFORE INSERT ON GRPMEMBERSHIP FOR EACH ROW DECLARE DELETEKEY CLOB; KEYTODELETE CLOB; DeleteIT_DLL_Val BINARY_INTEGER;  BEGIN  GRPMEMBERSHIP211227(:NEW.FRIEND_ID, :NEW.GROUP_ID /*, DeleteKey*/);  END; ",
		"CREATE OR REPLACE TRIGGER  DGRPMEMBERSHIP211227 BEFORE DELETE ON GRPMEMBERSHIP FOR EACH ROW DECLARE DELETEKEY CLOB; KEYTODELETE CLOB; DeleteIT_DLL_Val BINARY_INTEGER;  BEGIN  GRPMEMBERSHIP211227(:OLD.FRIEND_ID, :OLD.GROUP_ID /*, DeleteKey*/);  END; ",
		"CREATE OR REPLACE TRIGGER  UGRPMEMBERSHIP211227 BEFORE UPDATE ON GRPMEMBERSHIP FOR EACH ROW DECLARE DELETEKEY CLOB; KEYTODELETE CLOB; DeleteIT_DLL_Val BINARY_INTEGER;  BEGIN  GRPMEMBERSHIP211227(:OLD.FRIEND_ID, :OLD.GROUP_ID /*, DeleteKey*/); IF (:NEW.FRIEND_ID <> :OLD.FRIEND_ID OR :NEW.GROUP_ID <> :OLD.GROUP_ID) THEN GRPMEMBERSHIP211227(:NEW.FRIEND_ID, :NEW.GROUP_ID /*, DeleteKey*/);  END IF; END; ",
		"CREATE OR REPLACE TRIGGER  Uusers0073575388 BEFORE UPDATE ON users FOR EACH ROW DECLARE DeleteIT_DLL_Val BINARY_INTEGER; KeyToDelete  CLOB; /* DeleteKey CLOB; */ BEGIN KeyToDelete := ' ';  IF (:OLD.uname <> :NEW.uname OR :OLD.dob <> :NEW.dob OR :OLD.lastdate <> :NEW.lastdate OR :OLD.joindate <> :NEW.joindate OR :OLD.picture <> :NEW.picture OR :OLD.city <> :NEW.city OR :OLD.country <> :NEW.country OR :OLD.username <> :NEW.username OR :OLD.USER_ID <> :NEW.USER_ID) THEN  KeyToDelete := CONCAT('_53887478',:OLD.USER_ID); DeleteIT_DLL_Val := KOSARTriggerDeleteCall('RAYS', KeyToDelete, 0); END IF; END;",
		"CREATE OR REPLACE TRIGGER  Dusers0073575388 BEFORE DELETE ON users FOR EACH ROW DECLARE DeleteIT_DLL_Val BINARY_INTEGER; KeyToDelete  CLOB; /* DeleteKey CLOB; */ BEGIN KeyToDelete := ' ';  KeyToDelete := CONCAT('_53887478',:OLD.USER_ID);DeleteIT_DLL_Val := KOSARTriggerDeleteCall('RAYS', KeyToDelete, 0); END;",
		"CREATE OR REPLACE TRIGGER  Iusers0073575388 BEFORE INSERT ON users FOR EACH ROW DECLARE DeleteIT_DLL_Val BINARY_INTEGER; KeyToDelete  CLOB; /* DeleteKey CLOB; */ BEGIN KeyToDelete := ' ';  KeyToDelete := CONCAT('_53887478',:NEW.USER_ID); DeleteIT_DLL_Val := KOSARTriggerDeleteCall('RAYS', KeyToDelete, 0); END;",
		"CREATE OR REPLACE TRIGGER  Ufriends1067666 BEFORE UPDATE ON friends FOR EACH ROW DECLARE DeleteIT_DLL_Val BINARY_INTEGER; KeyToDelete  CLOB; /* DeleteKey CLOB; */ BEGIN KeyToDelete := ' ';  IF (:OLD.userid <> :NEW.userid OR :OLD.STATUS <> :NEW.STATUS) THEN  KeyToDelete := CONCAT('_6',CONCAT(:OLD.STATUS, :OLD.USERID)); DeleteIT_DLL_Val := KOSARTriggerDeleteCall('RAYS', KeyToDelete, 0); END IF; END;",
		"CREATE OR REPLACE TRIGGER  Dfriends1067666 BEFORE DELETE ON friends FOR EACH ROW DECLARE DeleteIT_DLL_Val BINARY_INTEGER; KeyToDelete  CLOB; /* DeleteKey CLOB; */ BEGIN KeyToDelete := ' ';  KeyToDelete := CONCAT('_6',CONCAT(:OLD.STATUS, :OLD.USERID));DeleteIT_DLL_Val := KOSARTriggerDeleteCall('RAYS', KeyToDelete, 0); END;",
		"CREATE OR REPLACE TRIGGER  Ifriends1067666 BEFORE INSERT ON friends FOR EACH ROW DECLARE DeleteIT_DLL_Val BINARY_INTEGER; KeyToDelete  CLOB; /* DeleteKey CLOB; */ BEGIN KeyToDelete := ' ';  KeyToDelete := CONCAT('_6',CONCAT(:NEW.STATUS, :NEW.USERID)); DeleteIT_DLL_Val := KOSARTriggerDeleteCall('RAYS', KeyToDelete, 0); END;",
		"CREATE OR REPLACE TRIGGER  Ufriends1067866 BEFORE UPDATE ON friends FOR EACH ROW DECLARE DeleteIT_DLL_Val BINARY_INTEGER; KeyToDelete  CLOB; /* DeleteKey CLOB; */ BEGIN KeyToDelete := ' ';  IF (:OLD.userid <> :NEW.userid OR :OLD.FRIENDID <> :NEW.FRIENDID OR :OLD.STATUS <> :NEW.STATUS) THEN  KeyToDelete := CONCAT('_6',CONCAT(:OLD.FRIENDID, :OLD.STATUS)); DeleteIT_DLL_Val := KOSARTriggerDeleteCall('RAYS', KeyToDelete, 0); END IF; END;",
		"CREATE OR REPLACE TRIGGER  Dfriends1067866 BEFORE DELETE ON friends FOR EACH ROW DECLARE DeleteIT_DLL_Val BINARY_INTEGER; KeyToDelete  CLOB; /* DeleteKey CLOB; */ BEGIN KeyToDelete := ' ';  KeyToDelete := CONCAT('_6',CONCAT(:OLD.FRIENDID, :OLD.STATUS));DeleteIT_DLL_Val := KOSARTriggerDeleteCall('RAYS', KeyToDelete, 0); END;",
		"CREATE OR REPLACE TRIGGER  Ifriends1067866 BEFORE INSERT ON friends FOR EACH ROW DECLARE DeleteIT_DLL_Val BINARY_INTEGER; KeyToDelete  CLOB; /* DeleteKey CLOB; */ BEGIN KeyToDelete := ' ';  KeyToDelete := CONCAT('_6',CONCAT(:NEW.FRIENDID, :NEW.STATUS)); DeleteIT_DLL_Val := KOSARTriggerDeleteCall('RAYS', KeyToDelete, 0); END;",
		"CREATE OR REPLACE TRIGGER  Ufriends1087868 BEFORE UPDATE ON friends FOR EACH ROW DECLARE DeleteIT_DLL_Val BINARY_INTEGER; KeyToDelete  CLOB; /* DeleteKey CLOB; */ BEGIN KeyToDelete := ' ';  IF (:OLD.friendid <> :NEW.friendid OR :OLD.STATUS <> :NEW.STATUS) THEN  KeyToDelete := CONCAT('_8',CONCAT(:OLD.FRIENDID, :OLD.STATUS)); DeleteIT_DLL_Val := KOSARTriggerDeleteCall('RAYS', KeyToDelete, 0); END IF; END;",
		"CREATE OR REPLACE TRIGGER  Dfriends1087868 BEFORE DELETE ON friends FOR EACH ROW DECLARE DeleteIT_DLL_Val BINARY_INTEGER; KeyToDelete  CLOB; /* DeleteKey CLOB; */ BEGIN KeyToDelete := ' ';  KeyToDelete := CONCAT('_8',CONCAT(:OLD.FRIENDID, :OLD.STATUS));DeleteIT_DLL_Val := KOSARTriggerDeleteCall('RAYS', KeyToDelete, 0); END;",
		"CREATE OR REPLACE TRIGGER  Ifriends1087868 BEFORE INSERT ON friends FOR EACH ROW DECLARE DeleteIT_DLL_Val BINARY_INTEGER; KeyToDelete  CLOB; /* DeleteKey CLOB; */ BEGIN KeyToDelete := ' ';  KeyToDelete := CONCAT('_8',CONCAT(:NEW.FRIENDID, :NEW.STATUS)); DeleteIT_DLL_Val := KOSARTriggerDeleteCall('RAYS', KeyToDelete, 0); END;",
		"CREATE OR REPLACE TRIGGER  Umessageinbox2081298158 BEFORE UPDATE ON messageinbox FOR EACH ROW DECLARE DeleteIT_DLL_Val BINARY_INTEGER; KeyToDelete  CLOB; /* DeleteKey CLOB; */ BEGIN KeyToDelete := ' ';  IF (:OLD.receiver <> :NEW.receiver OR :OLD.READ_FLAG <> :NEW.READ_FLAG OR :OLD.RECEIVERDELETED <> :NEW.RECEIVERDELETED) THEN  KeyToDelete := CONCAT('_8',CONCAT(:OLD.READ_FLAG, CONCAT(:OLD.RECEIVER, :OLD.RECEIVERDELETED))); DeleteIT_DLL_Val := KOSARTriggerDeleteCall('RAYS', KeyToDelete, 0); END IF; END;",
		"CREATE OR REPLACE TRIGGER  Dmessageinbox2081298158 BEFORE DELETE ON messageinbox FOR EACH ROW DECLARE DeleteIT_DLL_Val BINARY_INTEGER; KeyToDelete  CLOB; /* DeleteKey CLOB; */ BEGIN KeyToDelete := ' ';  KeyToDelete := CONCAT('_8',CONCAT(:OLD.READ_FLAG, CONCAT(:OLD.RECEIVER, :OLD.RECEIVERDELETED)));DeleteIT_DLL_Val := KOSARTriggerDeleteCall('RAYS', KeyToDelete, 0); END;",
		"CREATE OR REPLACE TRIGGER  Imessageinbox2081298158 BEFORE INSERT ON messageinbox FOR EACH ROW DECLARE DeleteIT_DLL_Val BINARY_INTEGER; KeyToDelete  CLOB; /* DeleteKey CLOB; */ BEGIN KeyToDelete := ' ';  KeyToDelete := CONCAT('_8',CONCAT(:NEW.READ_FLAG, CONCAT(:NEW.RECEIVER, :NEW.RECEIVERDELETED))); DeleteIT_DLL_Val := KOSARTriggerDeleteCall('RAYS', KeyToDelete, 0); END;",
		"CREATE OR REPLACE TRIGGER  Uuser_updates30912871099 BEFORE UPDATE ON user_updates FOR EACH ROW DECLARE DeleteIT_DLL_Val BINARY_INTEGER; KeyToDelete  CLOB; /* DeleteKey CLOB; */ BEGIN KeyToDelete := ' ';  IF (:OLD.friend_id <> :NEW.friend_id OR :OLD.ACCEPTED <> :NEW.ACCEPTED OR :OLD.DELETES <> :NEW.DELETES OR :OLD.EXPDELETER <> :NEW.EXPDELETER) THEN  KeyToDelete := CONCAT('_9',CONCAT(:OLD.ACCEPTED, CONCAT(:OLD.DELETES, CONCAT(:OLD.EXPDELETER, :OLD.FRIEND_ID)))); DeleteIT_DLL_Val := KOSARTriggerDeleteCall('RAYS', KeyToDelete, 0); END IF; END;",
		"CREATE OR REPLACE TRIGGER  Duser_updates30912871099 BEFORE DELETE ON user_updates FOR EACH ROW DECLARE DeleteIT_DLL_Val BINARY_INTEGER; KeyToDelete  CLOB; /* DeleteKey CLOB; */ BEGIN KeyToDelete := ' ';  KeyToDelete := CONCAT('_9',CONCAT(:OLD.ACCEPTED, CONCAT(:OLD.DELETES, CONCAT(:OLD.EXPDELETER, :OLD.FRIEND_ID))));DeleteIT_DLL_Val := KOSARTriggerDeleteCall('RAYS', KeyToDelete, 0); END;",
		"CREATE OR REPLACE TRIGGER  Iuser_updates30912871099 BEFORE INSERT ON user_updates FOR EACH ROW DECLARE DeleteIT_DLL_Val BINARY_INTEGER; KeyToDelete  CLOB; /* DeleteKey CLOB; */ BEGIN KeyToDelete := ' ';  KeyToDelete := CONCAT('_9',CONCAT(:NEW.ACCEPTED, CONCAT(:NEW.DELETES, CONCAT(:NEW.EXPDELETER, :NEW.FRIEND_ID)))); DeleteIT_DLL_Val := KOSARTriggerDeleteCall('RAYS', KeyToDelete, 0); END;",
		"CREATE OR REPLACE TRIGGER  Uuser_updates209128779 BEFORE UPDATE ON user_updates FOR EACH ROW DECLARE DeleteIT_DLL_Val BINARY_INTEGER; KeyToDelete  CLOB; /* DeleteKey CLOB; */ BEGIN KeyToDelete := ' ';  IF (:OLD.friend_id <> :NEW.friend_id OR :OLD.ACCEPTED <> :NEW.ACCEPTED OR :OLD.DELETES <> :NEW.DELETES OR :OLD.USER_ID <> :NEW.USER_ID) THEN  KeyToDelete := CONCAT('_9',CONCAT(:OLD.ACCEPTED, CONCAT(:OLD.DELETES, :OLD.USER_ID))); DeleteIT_DLL_Val := KOSARTriggerDeleteCall('RAYS', KeyToDelete, 0); END IF; END;",
		"CREATE OR REPLACE TRIGGER  Duser_updates209128779 BEFORE DELETE ON user_updates FOR EACH ROW DECLARE DeleteIT_DLL_Val BINARY_INTEGER; KeyToDelete  CLOB; /* DeleteKey CLOB; */ BEGIN KeyToDelete := ' ';  KeyToDelete := CONCAT('_9',CONCAT(:OLD.ACCEPTED, CONCAT(:OLD.DELETES, :OLD.USER_ID)));DeleteIT_DLL_Val := KOSARTriggerDeleteCall('RAYS', KeyToDelete, 0); END;",
		"CREATE OR REPLACE TRIGGER  Iuser_updates209128779 BEFORE INSERT ON user_updates FOR EACH ROW DECLARE DeleteIT_DLL_Val BINARY_INTEGER; KeyToDelete  CLOB; /* DeleteKey CLOB; */ BEGIN KeyToDelete := ' ';  KeyToDelete := CONCAT('_9',CONCAT(:NEW.ACCEPTED, CONCAT(:NEW.DELETES, :NEW.USER_ID))); DeleteIT_DLL_Val := KOSARTriggerDeleteCall('RAYS', KeyToDelete, 0); END;",
		"CREATE OR REPLACE TRIGGER  Uuser_updates30912871079 BEFORE UPDATE ON user_updates FOR EACH ROW DECLARE DeleteIT_DLL_Val BINARY_INTEGER; KeyToDelete  CLOB; /* DeleteKey CLOB; */ BEGIN KeyToDelete := ' ';  IF (:OLD.friend_id <> :NEW.friend_id OR :OLD.ACCEPTED <> :NEW.ACCEPTED OR :OLD.DELETES <> :NEW.DELETES OR :OLD.EXPDELETES <> :NEW.EXPDELETES OR :OLD.USER_ID <> :NEW.USER_ID) THEN  KeyToDelete := CONCAT('_9',CONCAT(:OLD.ACCEPTED, CONCAT(:OLD.DELETES, CONCAT(:OLD.EXPDELETES, :OLD.USER_ID)))); DeleteIT_DLL_Val := KOSARTriggerDeleteCall('RAYS', KeyToDelete, 0); END IF; END;",
		"CREATE OR REPLACE TRIGGER  Duser_updates30912871079 BEFORE DELETE ON user_updates FOR EACH ROW DECLARE DeleteIT_DLL_Val BINARY_INTEGER; KeyToDelete  CLOB; /* DeleteKey CLOB; */ BEGIN KeyToDelete := ' ';  KeyToDelete := CONCAT('_9',CONCAT(:OLD.ACCEPTED, CONCAT(:OLD.DELETES, CONCAT(:OLD.EXPDELETES, :OLD.USER_ID))));DeleteIT_DLL_Val := KOSARTriggerDeleteCall('RAYS', KeyToDelete, 0); END;",
		"CREATE OR REPLACE TRIGGER  Iuser_updates30912871079 BEFORE INSERT ON user_updates FOR EACH ROW DECLARE DeleteIT_DLL_Val BINARY_INTEGER; KeyToDelete  CLOB; /* DeleteKey CLOB; */ BEGIN KeyToDelete := ' ';  KeyToDelete := CONCAT('_9',CONCAT(:NEW.ACCEPTED, CONCAT(:NEW.DELETES, CONCAT(:NEW.EXPDELETES, :NEW.USER_ID)))); DeleteIT_DLL_Val := KOSARTriggerDeleteCall('RAYS', KeyToDelete, 0); END;",
		"CREATE OR REPLACE TRIGGER  Uusers007577 BEFORE UPDATE ON users FOR EACH ROW DECLARE DeleteIT_DLL_Val BINARY_INTEGER; KeyToDelete  CLOB; /* DeleteKey CLOB; */ BEGIN KeyToDelete := ' ';  IF (:OLD.changed <> :NEW.changed OR :OLD.USER_ID <> :NEW.USER_ID) THEN  KeyToDelete := CONCAT('_7',:OLD.USER_ID); DeleteIT_DLL_Val := KOSARTriggerDeleteCall('RAYS', KeyToDelete, 0); END IF; END;",
		"CREATE OR REPLACE TRIGGER  Dusers007577 BEFORE DELETE ON users FOR EACH ROW DECLARE DeleteIT_DLL_Val BINARY_INTEGER; KeyToDelete  CLOB; /* DeleteKey CLOB; */ BEGIN KeyToDelete := ' ';  KeyToDelete := CONCAT('_7',:OLD.USER_ID);DeleteIT_DLL_Val := KOSARTriggerDeleteCall('RAYS', KeyToDelete, 0); END;",
		"CREATE OR REPLACE TRIGGER  Iusers007577 BEFORE INSERT ON users FOR EACH ROW DECLARE DeleteIT_DLL_Val BINARY_INTEGER; KeyToDelete  CLOB; /* DeleteKey CLOB; */ BEGIN KeyToDelete := ' ';  KeyToDelete := CONCAT('_7',:NEW.USER_ID); DeleteIT_DLL_Val := KOSARTriggerDeleteCall('RAYS', KeyToDelete, 0); END;",
		"CREATE OR REPLACE PROCEDURE  USERS321835 (InArg1 IN USERS.USER_ID%TYPE /*, DeleteKey IN OUT CLOB*/)  IS var1  USER_CAMERAS.IS_STREAMING%TYPE; var2  FRIENDS.USERID%TYPE; var3  FRIENDS.STATUS%TYPE;  TOKEN CLOB := TO_CLOB('U.USER_ID=UC.USER_IDF.FRIENDID=U.USER_ID'); DeleteIT_DLL_Val BINARY_INTEGER; KeyToDelete CLOB;  CURSOR CRS1 IS SELECT USER_CAMERAS.IS_STREAMING, FRIENDS.USERID, FRIENDS.STATUS FROM USER_CAMERAS, FRIENDS WHERE USER_CAMERAS.USER_ID=InArg1 AND FRIENDS.FRIENDID=InArg1;  BEGIN  OPEN CRS1;  LOOP  FETCH CRS1 into var1, var2, var3;  EXIT WHEN CRS1%NOTFOUND; KeyToDelete := CONCAT(var1, CONCAT(var2, CONCAT(var3, TOKEN))); DeleteIT_DLL_Val := KOSARTriggerDeleteCall('RAYS', KeyToDelete, 0); END LOOP;  CLOSE CRS1; END;",
		"CREATE OR REPLACE TRIGGER  IUSERS321835 BEFORE INSERT ON USERS FOR EACH ROW DECLARE DELETEKEY CLOB; KEYTODELETE CLOB; DeleteIT_DLL_Val BINARY_INTEGER;  BEGIN  USERS321835(:NEW.USER_ID /*, DeleteKey*/);  END; ",
		"CREATE OR REPLACE TRIGGER  DUSERS321835 BEFORE DELETE ON USERS FOR EACH ROW DECLARE DELETEKEY CLOB; KEYTODELETE CLOB; DeleteIT_DLL_Val BINARY_INTEGER;  BEGIN  USERS321835(:OLD.USER_ID /*, DeleteKey*/);  END; ",
		"CREATE OR REPLACE TRIGGER  UUSERS321835 BEFORE UPDATE ON USERS FOR EACH ROW DECLARE DELETEKEY CLOB; KEYTODELETE CLOB; DeleteIT_DLL_Val BINARY_INTEGER;  BEGIN  USERS321835(:OLD.USER_ID /*, DeleteKey*/); IF (:NEW.USER_ID <> :OLD.USER_ID) THEN USERS321835(:NEW.USER_ID /*, DeleteKey*/);  END IF; END; ",
		"CREATE OR REPLACE PROCEDURE  USER_CAMERAS321835 (InArg1 IN USER_CAMERAS.IS_STREAMING%TYPE, InArg2 IN USER_CAMERAS.USER_ID%TYPE /*, DeleteKey IN OUT CLOB*/)  IS var1  USER_CAMERAS.IS_STREAMING%TYPE; var2  FRIENDS.USERID%TYPE; var3  FRIENDS.STATUS%TYPE;  TOKEN CLOB := TO_CLOB('U.USER_ID=UC.USER_IDF.FRIENDID=U.USER_ID'); DeleteIT_DLL_Val BINARY_INTEGER; KeyToDelete CLOB;  CURSOR CRS1 IS SELECT  InArg1, FRIENDS.USERID, FRIENDS.STATUS FROM USERS, FRIENDS WHERE USERS.USER_ID=InArg2 AND  FRIENDS.FRIENDID=USERS.USER_ID ;  BEGIN  OPEN CRS1;  LOOP  FETCH CRS1 into var1, var2, var3;  EXIT WHEN CRS1%NOTFOUND; KeyToDelete := CONCAT(var1, CONCAT(var2, CONCAT(var3, TOKEN))); DeleteIT_DLL_Val := KOSARTriggerDeleteCall('RAYS', KeyToDelete, 0); END LOOP;  CLOSE CRS1; END;",
		"CREATE OR REPLACE TRIGGER  IUSER_CAMERAS321835 BEFORE INSERT ON USER_CAMERAS FOR EACH ROW DECLARE DELETEKEY CLOB; KEYTODELETE CLOB; DeleteIT_DLL_Val BINARY_INTEGER;  BEGIN  USER_CAMERAS321835(:NEW.IS_STREAMING, :NEW.USER_ID /*, DeleteKey*/);  END; ",
		"CREATE OR REPLACE TRIGGER  DUSER_CAMERAS321835 BEFORE DELETE ON USER_CAMERAS FOR EACH ROW DECLARE DELETEKEY CLOB; KEYTODELETE CLOB; DeleteIT_DLL_Val BINARY_INTEGER;  BEGIN  USER_CAMERAS321835(:OLD.IS_STREAMING, :OLD.USER_ID /*, DeleteKey*/);  END; ",
		"CREATE OR REPLACE TRIGGER  UUSER_CAMERAS321835 BEFORE UPDATE ON USER_CAMERAS FOR EACH ROW DECLARE DELETEKEY CLOB; KEYTODELETE CLOB; DeleteIT_DLL_Val BINARY_INTEGER;  BEGIN  USER_CAMERAS321835(:OLD.IS_STREAMING, :OLD.USER_ID /*, DeleteKey*/); IF (:NEW.IS_STREAMING <> :OLD.IS_STREAMING OR :NEW.USER_ID <> :OLD.USER_ID) THEN USER_CAMERAS321835(:NEW.IS_STREAMING, :NEW.USER_ID /*, DeleteKey*/);  END IF; END; ",
		"CREATE OR REPLACE PROCEDURE  FRIENDS321835 (InArg1 IN FRIENDS.USERID%TYPE, InArg2 IN FRIENDS.STATUS%TYPE, InArg3 IN FRIENDS.FRIENDID%TYPE /*, DeleteKey IN OUT CLOB*/)  IS var1  USER_CAMERAS.IS_STREAMING%TYPE; var2  FRIENDS.USERID%TYPE; var3  FRIENDS.STATUS%TYPE;  TOKEN CLOB := TO_CLOB('U.USER_ID=UC.USER_IDF.FRIENDID=U.USER_ID'); DeleteIT_DLL_Val BINARY_INTEGER; KeyToDelete CLOB;  CURSOR CRS1 IS SELECT USER_CAMERAS.IS_STREAMING,  InArg1,  InArg2 FROM USERS, USER_CAMERAS WHERE  USERS.USER_ID=USER_CAMERAS.USER_ID  AND USERS.USER_ID=InArg3;  BEGIN  OPEN CRS1;  LOOP  FETCH CRS1 into var1, var2, var3;  EXIT WHEN CRS1%NOTFOUND; KeyToDelete := CONCAT(var1, CONCAT(var2, CONCAT(var3, TOKEN))); DeleteIT_DLL_Val := KOSARTriggerDeleteCall('RAYS', KeyToDelete, 0); END LOOP;  CLOSE CRS1; END;",
		"CREATE OR REPLACE TRIGGER  IFRIENDS321835 BEFORE INSERT ON FRIENDS FOR EACH ROW DECLARE DELETEKEY CLOB; KEYTODELETE CLOB; DeleteIT_DLL_Val BINARY_INTEGER;  BEGIN  FRIENDS321835(:NEW.USERID, :NEW.STATUS, :NEW.FRIENDID /*, DeleteKey*/);  END; ",
		"CREATE OR REPLACE TRIGGER  DFRIENDS321835 BEFORE DELETE ON FRIENDS FOR EACH ROW DECLARE DELETEKEY CLOB; KEYTODELETE CLOB; DeleteIT_DLL_Val BINARY_INTEGER;  BEGIN  FRIENDS321835(:OLD.USERID, :OLD.STATUS, :OLD.FRIENDID /*, DeleteKey*/);  END; ",
		"CREATE OR REPLACE TRIGGER  UFRIENDS321835 BEFORE UPDATE ON FRIENDS FOR EACH ROW DECLARE DELETEKEY CLOB; KEYTODELETE CLOB; DeleteIT_DLL_Val BINARY_INTEGER;  BEGIN  FRIENDS321835(:OLD.USERID, :OLD.STATUS, :OLD.FRIENDID /*, DeleteKey*/); IF (:NEW.USERID <> :OLD.USERID OR :NEW.STATUS <> :OLD.STATUS OR :NEW.FRIENDID <> :OLD.FRIENDID) THEN FRIENDS321835(:NEW.USERID, :NEW.STATUS, :NEW.FRIENDID /*, DeleteKey*/);  END IF; END; ",
		"CREATE OR REPLACE PROCEDURE  USERS32935 (InArg1 IN USERS.USER_ID%TYPE /*, DeleteKey IN OUT CLOB*/)  IS var1  USER_CAMERAS.IS_STREAMING%TYPE; var2  FRIENDS.STATUS%TYPE; var3  FRIENDS.FRIENDID%TYPE;  TOKEN CLOB := TO_CLOB('U.USER_ID=UC.USER_IDF.USERID=U.USER_ID'); DeleteIT_DLL_Val BINARY_INTEGER; KeyToDelete CLOB;  CURSOR CRS1 IS SELECT USER_CAMERAS.IS_STREAMING, FRIENDS.STATUS, FRIENDS.FRIENDID FROM USER_CAMERAS, FRIENDS WHERE USER_CAMERAS.USER_ID=InArg1 AND FRIENDS.USERID=InArg1;  BEGIN  OPEN CRS1;  LOOP  FETCH CRS1 into var1, var2, var3;  EXIT WHEN CRS1%NOTFOUND; KeyToDelete := CONCAT(var1, CONCAT(var2, CONCAT(var3, TOKEN))); DeleteIT_DLL_Val := KOSARTriggerDeleteCall('RAYS', KeyToDelete, 0); END LOOP;  CLOSE CRS1; END;",
		"CREATE OR REPLACE TRIGGER  IUSERS32935 BEFORE INSERT ON USERS FOR EACH ROW DECLARE DELETEKEY CLOB; KEYTODELETE CLOB; DeleteIT_DLL_Val BINARY_INTEGER;  BEGIN  USERS32935(:NEW.USER_ID /*, DeleteKey*/);  END; ",
		"CREATE OR REPLACE TRIGGER  DUSERS32935 BEFORE DELETE ON USERS FOR EACH ROW DECLARE DELETEKEY CLOB; KEYTODELETE CLOB; DeleteIT_DLL_Val BINARY_INTEGER;  BEGIN  USERS32935(:OLD.USER_ID /*, DeleteKey*/);  END; ",
		"CREATE OR REPLACE TRIGGER  UUSERS32935 BEFORE UPDATE ON USERS FOR EACH ROW DECLARE DELETEKEY CLOB; KEYTODELETE CLOB; DeleteIT_DLL_Val BINARY_INTEGER;  BEGIN  USERS32935(:OLD.USER_ID /*, DeleteKey*/); IF (:NEW.USER_ID <> :OLD.USER_ID) THEN USERS32935(:NEW.USER_ID /*, DeleteKey*/);  END IF; END; ",
		"CREATE OR REPLACE PROCEDURE  USER_CAMERAS32935 (InArg1 IN USER_CAMERAS.IS_STREAMING%TYPE, InArg2 IN USER_CAMERAS.USER_ID%TYPE /*, DeleteKey IN OUT CLOB*/)  IS var1  USER_CAMERAS.IS_STREAMING%TYPE; var2  FRIENDS.STATUS%TYPE; var3  FRIENDS.FRIENDID%TYPE;  TOKEN CLOB := TO_CLOB('U.USER_ID=UC.USER_IDF.USERID=U.USER_ID'); DeleteIT_DLL_Val BINARY_INTEGER; KeyToDelete CLOB;  CURSOR CRS1 IS SELECT  InArg1, FRIENDS.STATUS, FRIENDS.FRIENDID FROM USERS, FRIENDS WHERE USERS.USER_ID=InArg2 AND  FRIENDS.USERID=USERS.USER_ID ;  BEGIN  OPEN CRS1;  LOOP  FETCH CRS1 into var1, var2, var3;  EXIT WHEN CRS1%NOTFOUND; KeyToDelete := CONCAT(var1, CONCAT(var2, CONCAT(var3, TOKEN))); DeleteIT_DLL_Val := KOSARTriggerDeleteCall('RAYS', KeyToDelete, 0); END LOOP;  CLOSE CRS1; END;",
		"CREATE OR REPLACE TRIGGER  IUSER_CAMERAS32935 BEFORE INSERT ON USER_CAMERAS FOR EACH ROW DECLARE DELETEKEY CLOB; KEYTODELETE CLOB; DeleteIT_DLL_Val BINARY_INTEGER;  BEGIN  USER_CAMERAS32935(:NEW.IS_STREAMING, :NEW.USER_ID /*, DeleteKey*/);  END; ",
		"CREATE OR REPLACE TRIGGER  DUSER_CAMERAS32935 BEFORE DELETE ON USER_CAMERAS FOR EACH ROW DECLARE DELETEKEY CLOB; KEYTODELETE CLOB; DeleteIT_DLL_Val BINARY_INTEGER;  BEGIN  USER_CAMERAS32935(:OLD.IS_STREAMING, :OLD.USER_ID /*, DeleteKey*/);  END; ",
		"CREATE OR REPLACE TRIGGER  UUSER_CAMERAS32935 BEFORE UPDATE ON USER_CAMERAS FOR EACH ROW DECLARE DELETEKEY CLOB; KEYTODELETE CLOB; DeleteIT_DLL_Val BINARY_INTEGER;  BEGIN  USER_CAMERAS32935(:OLD.IS_STREAMING, :OLD.USER_ID /*, DeleteKey*/); IF (:NEW.IS_STREAMING <> :OLD.IS_STREAMING OR :NEW.USER_ID <> :OLD.USER_ID) THEN USER_CAMERAS32935(:NEW.IS_STREAMING, :NEW.USER_ID /*, DeleteKey*/);  END IF; END; ",
		"CREATE OR REPLACE PROCEDURE  FRIENDS32935 (InArg1 IN FRIENDS.STATUS%TYPE, InArg2 IN FRIENDS.FRIENDID%TYPE, InArg3 IN FRIENDS.USERID%TYPE /*, DeleteKey IN OUT CLOB*/)  IS var1  USER_CAMERAS.IS_STREAMING%TYPE; var2  FRIENDS.STATUS%TYPE; var3  FRIENDS.FRIENDID%TYPE;  TOKEN CLOB := TO_CLOB('U.USER_ID=UC.USER_IDF.USERID=U.USER_ID'); DeleteIT_DLL_Val BINARY_INTEGER; KeyToDelete CLOB;  CURSOR CRS1 IS SELECT USER_CAMERAS.IS_STREAMING,  InArg1,  InArg2 FROM USERS, USER_CAMERAS WHERE  USERS.USER_ID=USER_CAMERAS.USER_ID  AND USERS.USER_ID=InArg3;  BEGIN  OPEN CRS1;  LOOP  FETCH CRS1 into var1, var2, var3;  EXIT WHEN CRS1%NOTFOUND; KeyToDelete := CONCAT(var1, CONCAT(var2, CONCAT(var3, TOKEN))); DeleteIT_DLL_Val := KOSARTriggerDeleteCall('RAYS', KeyToDelete, 0); END LOOP;  CLOSE CRS1; END;",
		"CREATE OR REPLACE TRIGGER  IFRIENDS32935 BEFORE INSERT ON FRIENDS FOR EACH ROW DECLARE DELETEKEY CLOB; KEYTODELETE CLOB; DeleteIT_DLL_Val BINARY_INTEGER;  BEGIN  FRIENDS32935(:NEW.STATUS, :NEW.FRIENDID, :NEW.USERID /*, DeleteKey*/);  END; ",
		"CREATE OR REPLACE TRIGGER  DFRIENDS32935 BEFORE DELETE ON FRIENDS FOR EACH ROW DECLARE DELETEKEY CLOB; KEYTODELETE CLOB; DeleteIT_DLL_Val BINARY_INTEGER;  BEGIN  FRIENDS32935(:OLD.STATUS, :OLD.FRIENDID, :OLD.USERID /*, DeleteKey*/);  END; ",
		"CREATE OR REPLACE TRIGGER  UFRIENDS32935 BEFORE UPDATE ON FRIENDS FOR EACH ROW DECLARE DELETEKEY CLOB; KEYTODELETE CLOB; DeleteIT_DLL_Val BINARY_INTEGER;  BEGIN  FRIENDS32935(:OLD.STATUS, :OLD.FRIENDID, :OLD.USERID /*, DeleteKey*/); IF (:NEW.STATUS <> :OLD.STATUS OR :NEW.FRIENDID <> :OLD.FRIENDID OR :NEW.USERID <> :OLD.USERID) THEN FRIENDS32935(:NEW.STATUS, :NEW.FRIENDID, :NEW.USERID /*, DeleteKey*/);  END IF; END; ",
		"CREATE OR REPLACE PROCEDURE  USER_CAMERAS334141 (arg1 IN USER_CAMERAS.USER_ID%TYPE, arg2 IN USER_CAMERAS.PRIVACY%TYPE, arg3 IN USER_CAMERAS.IS_STREAMING%TYPE/*, DeleteKey IN OUT CLOB*/) IS TOKEN CLOB := TO_CLOB('UU.USER_ID=U.USER_IDUU.FRIEND_ID=U.USER_IDU.CAMERA_ID=C.CAMERA_ID');DeleteIT_DLL_Val BINARY_INTEGER;KeyToDelete CLOB; BEGIN KeyToDelete := CONCAT(arg1, CONCAT(arg2, CONCAT(arg3, TOKEN))); DeleteIT_DLL_Val := KOSARTriggerDeleteCall('RAYS', KeyToDelete, 0);END;",
		"CREATE OR REPLACE TRIGGER  IUSER_CAMERAS334141 BEFORE INSERT ON USER_CAMERAS FOR EACH ROW DECLARE DELETEKEY CLOB; KEYTODELETE CLOB; DeleteIT_DLL_Val BINARY_INTEGER;  BEGIN  USER_CAMERAS334141(:NEW.USER_ID, :NEW.PRIVACY, :NEW.IS_STREAMING /*, DeleteKey*/);  END; ",
		"CREATE OR REPLACE TRIGGER  DUSER_CAMERAS334141 BEFORE DELETE ON USER_CAMERAS FOR EACH ROW DECLARE DELETEKEY CLOB; KEYTODELETE CLOB; DeleteIT_DLL_Val BINARY_INTEGER;  BEGIN  USER_CAMERAS334141(:OLD.USER_ID, :OLD.PRIVACY, :OLD.IS_STREAMING /*, DeleteKey*/);  END; ",
		"CREATE OR REPLACE TRIGGER  UUSER_CAMERAS334141 BEFORE UPDATE ON USER_CAMERAS FOR EACH ROW DECLARE DELETEKEY CLOB; KEYTODELETE CLOB; DeleteIT_DLL_Val BINARY_INTEGER;  BEGIN  USER_CAMERAS334141(:OLD.USER_ID, :OLD.PRIVACY, :OLD.IS_STREAMING /*, DeleteKey*/); IF (:NEW.USER_ID <> :OLD.USER_ID OR :NEW.PRIVACY <> :OLD.PRIVACY OR :NEW.IS_STREAMING <> :OLD.IS_STREAMING) THEN USER_CAMERAS334141(:New.USER_ID, :New.PRIVACY, :New.IS_STREAMING /*, DeleteKey*/);  END IF; END; ",
		"CREATE OR REPLACE PROCEDURE  CAMERA334141 (InArg1 IN CAMERA.CAMERA_ID%TYPE /*, DeleteKey IN OUT CLOB*/)  IS var1  USER_CAMERAS.USER_ID%TYPE; var2  USER_CAMERAS.PRIVACY%TYPE; var3  USER_CAMERAS.IS_STREAMING%TYPE;  TOKEN CLOB := TO_CLOB('UU.USER_ID=U.USER_IDUU.FRIEND_ID=U.USER_IDU.CAMERA_ID=C.CAMERA_ID'); DeleteIT_DLL_Val BINARY_INTEGER; KeyToDelete CLOB;  CURSOR CRS1 IS SELECT USER_CAMERAS.USER_ID, USER_CAMERAS.PRIVACY, USER_CAMERAS.IS_STREAMING FROM USER_CAMERAS, USER_UPDATES WHERE  USER_UPDATES.USER_ID=USER_CAMERAS.USER_ID  AND  USER_UPDATES.FRIEND_ID=USER_CAMERAS.USER_ID  AND USER_CAMERAS.CAMERA_ID=InArg1;  BEGIN  OPEN CRS1;  LOOP  FETCH CRS1 into var1, var2, var3;  EXIT WHEN CRS1%NOTFOUND; KeyToDelete := CONCAT(var1, CONCAT(var2, CONCAT(var3, TOKEN))); DeleteIT_DLL_Val := KOSARTriggerDeleteCall('RAYS', KeyToDelete, 0); END LOOP;  CLOSE CRS1; END;",
		"CREATE OR REPLACE TRIGGER  ICAMERA334141 BEFORE INSERT ON CAMERA FOR EACH ROW DECLARE DELETEKEY CLOB; KEYTODELETE CLOB; DeleteIT_DLL_Val BINARY_INTEGER;  BEGIN  CAMERA334141(:NEW.CAMERA_ID /*, DeleteKey*/);  END; ",
		"CREATE OR REPLACE TRIGGER  DCAMERA334141 BEFORE DELETE ON CAMERA FOR EACH ROW DECLARE DELETEKEY CLOB; KEYTODELETE CLOB; DeleteIT_DLL_Val BINARY_INTEGER;  BEGIN  CAMERA334141(:OLD.CAMERA_ID /*, DeleteKey*/);  END; ",
		"CREATE OR REPLACE TRIGGER  UCAMERA334141 BEFORE UPDATE ON CAMERA FOR EACH ROW DECLARE DELETEKEY CLOB; KEYTODELETE CLOB; DeleteIT_DLL_Val BINARY_INTEGER;  BEGIN  CAMERA334141(:OLD.CAMERA_ID /*, DeleteKey*/); IF (:NEW.CAMERA_ID <> :OLD.CAMERA_ID) THEN CAMERA334141(:NEW.CAMERA_ID /*, DeleteKey*/);  END IF; END; ",
		"CREATE OR REPLACE PROCEDURE  USER_UPDATES334141 (InArg1 IN USER_UPDATES.USER_ID%TYPE, InArg2 IN USER_UPDATES.FRIEND_ID%TYPE /*, DeleteKey IN OUT CLOB*/)  IS var1  USER_CAMERAS.USER_ID%TYPE; var2  USER_CAMERAS.PRIVACY%TYPE; var3  USER_CAMERAS.IS_STREAMING%TYPE;  TOKEN CLOB := TO_CLOB('UU.USER_ID=U.USER_IDUU.FRIEND_ID=U.USER_IDU.CAMERA_ID=C.CAMERA_ID'); DeleteIT_DLL_Val BINARY_INTEGER; KeyToDelete CLOB;  CURSOR CRS1 IS SELECT USER_CAMERAS.USER_ID, USER_CAMERAS.PRIVACY, USER_CAMERAS.IS_STREAMING FROM USER_CAMERAS, CAMERA WHERE USER_CAMERAS.USER_ID=InArg1 AND USER_CAMERAS.USER_ID=InArg2 AND  USER_CAMERAS.CAMERA_ID=CAMERA.CAMERA_ID ;  BEGIN  OPEN CRS1;  LOOP  FETCH CRS1 into var1, var2, var3;  EXIT WHEN CRS1%NOTFOUND; KeyToDelete := CONCAT(var1, CONCAT(var2, CONCAT(var3, TOKEN))); DeleteIT_DLL_Val := KOSARTriggerDeleteCall('RAYS', KeyToDelete, 0); END LOOP;  CLOSE CRS1; END;",
		"CREATE OR REPLACE TRIGGER  IUSER_UPDATES334141 BEFORE INSERT ON USER_UPDATES FOR EACH ROW DECLARE DELETEKEY CLOB; KEYTODELETE CLOB; DeleteIT_DLL_Val BINARY_INTEGER;  BEGIN  USER_UPDATES334141(:NEW.USER_ID, :NEW.FRIEND_ID /*, DeleteKey*/);  END; ",
		"CREATE OR REPLACE TRIGGER  DUSER_UPDATES334141 BEFORE DELETE ON USER_UPDATES FOR EACH ROW DECLARE DELETEKEY CLOB; KEYTODELETE CLOB; DeleteIT_DLL_Val BINARY_INTEGER;  BEGIN  USER_UPDATES334141(:OLD.USER_ID, :OLD.FRIEND_ID /*, DeleteKey*/);  END; ",
		"CREATE OR REPLACE TRIGGER  UUSER_UPDATES334141 BEFORE UPDATE ON USER_UPDATES FOR EACH ROW DECLARE DELETEKEY CLOB; KEYTODELETE CLOB; DeleteIT_DLL_Val BINARY_INTEGER;  BEGIN  USER_UPDATES334141(:OLD.USER_ID, :OLD.FRIEND_ID /*, DeleteKey*/); IF (:NEW.USER_ID <> :OLD.USER_ID OR :NEW.FRIEND_ID <> :OLD.FRIEND_ID) THEN USER_UPDATES334141(:NEW.USER_ID, :NEW.FRIEND_ID /*, DeleteKey*/);  END IF; END; ",
		"CREATE OR REPLACE PROCEDURE  USER_CAMERAS334141 (arg1 IN USER_CAMERAS.USER_ID%TYPE, arg2 IN USER_CAMERAS.PRIVACY%TYPE, arg3 IN USER_CAMERAS.IS_STREAMING%TYPE/*, DeleteKey IN OUT CLOB*/) IS TOKEN CLOB := TO_CLOB('UU.USER_ID=U.USER_IDUU.FRIEND_ID=U.USER_IDU.CAMERA_ID=C.CAMERA_ID');DeleteIT_DLL_Val BINARY_INTEGER;KeyToDelete CLOB; BEGIN KeyToDelete := CONCAT(arg1, CONCAT(arg2, CONCAT(arg3, TOKEN))); DeleteIT_DLL_Val := KOSARTriggerDeleteCall('RAYS', KeyToDelete, 0);END;",
		"CREATE OR REPLACE TRIGGER  IUSER_CAMERAS334141 BEFORE INSERT ON USER_CAMERAS FOR EACH ROW DECLARE DELETEKEY CLOB; KEYTODELETE CLOB; DeleteIT_DLL_Val BINARY_INTEGER;  BEGIN  USER_CAMERAS334141(:NEW.USER_ID, :NEW.PRIVACY, :NEW.IS_STREAMING /*, DeleteKey*/);  END; ",
		"CREATE OR REPLACE TRIGGER  DUSER_CAMERAS334141 BEFORE DELETE ON USER_CAMERAS FOR EACH ROW DECLARE DELETEKEY CLOB; KEYTODELETE CLOB; DeleteIT_DLL_Val BINARY_INTEGER;  BEGIN  USER_CAMERAS334141(:OLD.USER_ID, :OLD.PRIVACY, :OLD.IS_STREAMING /*, DeleteKey*/);  END; ",
		"CREATE OR REPLACE TRIGGER  UUSER_CAMERAS334141 BEFORE UPDATE ON USER_CAMERAS FOR EACH ROW DECLARE DELETEKEY CLOB; KEYTODELETE CLOB; DeleteIT_DLL_Val BINARY_INTEGER;  BEGIN  USER_CAMERAS334141(:OLD.USER_ID, :OLD.PRIVACY, :OLD.IS_STREAMING /*, DeleteKey*/); IF (:NEW.USER_ID <> :OLD.USER_ID OR :NEW.PRIVACY <> :OLD.PRIVACY OR :NEW.IS_STREAMING <> :OLD.IS_STREAMING) THEN USER_CAMERAS334141(:New.USER_ID, :New.PRIVACY, :New.IS_STREAMING /*, DeleteKey*/);  END IF; END; ",
		"CREATE OR REPLACE PROCEDURE  CAMERA334141 (InArg1 IN CAMERA.CAMERA_ID%TYPE /*, DeleteKey IN OUT CLOB*/)  IS var1  USER_CAMERAS.USER_ID%TYPE; var2  USER_CAMERAS.PRIVACY%TYPE; var3  USER_CAMERAS.IS_STREAMING%TYPE;  TOKEN CLOB := TO_CLOB('UU.USER_ID=U.USER_IDUU.FRIEND_ID=U.USER_IDU.CAMERA_ID=C.CAMERA_ID'); DeleteIT_DLL_Val BINARY_INTEGER; KeyToDelete CLOB;  CURSOR CRS1 IS SELECT USER_CAMERAS.USER_ID, USER_CAMERAS.PRIVACY, USER_CAMERAS.IS_STREAMING FROM USER_CAMERAS, USER_UPDATES WHERE  USER_UPDATES.USER_ID=USER_CAMERAS.USER_ID  AND  USER_UPDATES.FRIEND_ID=USER_CAMERAS.USER_ID  AND USER_CAMERAS.CAMERA_ID=InArg1;  BEGIN  OPEN CRS1;  LOOP  FETCH CRS1 into var1, var2, var3;  EXIT WHEN CRS1%NOTFOUND; KeyToDelete := CONCAT(var1, CONCAT(var2, CONCAT(var3, TOKEN))); DeleteIT_DLL_Val := KOSARTriggerDeleteCall('RAYS', KeyToDelete, 0); END LOOP;  CLOSE CRS1; END;",
		"CREATE OR REPLACE TRIGGER  ICAMERA334141 BEFORE INSERT ON CAMERA FOR EACH ROW DECLARE DELETEKEY CLOB; KEYTODELETE CLOB; DeleteIT_DLL_Val BINARY_INTEGER;  BEGIN  CAMERA334141(:NEW.CAMERA_ID /*, DeleteKey*/);  END; ",
		"CREATE OR REPLACE TRIGGER  DCAMERA334141 BEFORE DELETE ON CAMERA FOR EACH ROW DECLARE DELETEKEY CLOB; KEYTODELETE CLOB; DeleteIT_DLL_Val BINARY_INTEGER;  BEGIN  CAMERA334141(:OLD.CAMERA_ID /*, DeleteKey*/);  END; ",
		"CREATE OR REPLACE TRIGGER  UCAMERA334141 BEFORE UPDATE ON CAMERA FOR EACH ROW DECLARE DELETEKEY CLOB; KEYTODELETE CLOB; DeleteIT_DLL_Val BINARY_INTEGER;  BEGIN  CAMERA334141(:OLD.CAMERA_ID /*, DeleteKey*/); IF (:NEW.CAMERA_ID <> :OLD.CAMERA_ID) THEN CAMERA334141(:NEW.CAMERA_ID /*, DeleteKey*/);  END IF; END; ",
		"CREATE OR REPLACE PROCEDURE  USER_UPDATES334141 (InArg1 IN USER_UPDATES.USER_ID%TYPE, InArg2 IN USER_UPDATES.FRIEND_ID%TYPE /*, DeleteKey IN OUT CLOB*/)  IS var1  USER_CAMERAS.USER_ID%TYPE; var2  USER_CAMERAS.PRIVACY%TYPE; var3  USER_CAMERAS.IS_STREAMING%TYPE;  TOKEN CLOB := TO_CLOB('UU.USER_ID=U.USER_IDUU.FRIEND_ID=U.USER_IDU.CAMERA_ID=C.CAMERA_ID'); DeleteIT_DLL_Val BINARY_INTEGER; KeyToDelete CLOB;  CURSOR CRS1 IS SELECT USER_CAMERAS.USER_ID, USER_CAMERAS.PRIVACY, USER_CAMERAS.IS_STREAMING FROM USER_CAMERAS, CAMERA WHERE USER_CAMERAS.USER_ID=InArg1 AND USER_CAMERAS.USER_ID=InArg2 AND  USER_CAMERAS.CAMERA_ID=CAMERA.CAMERA_ID ;  BEGIN  OPEN CRS1;  LOOP  FETCH CRS1 into var1, var2, var3;  EXIT WHEN CRS1%NOTFOUND; KeyToDelete := CONCAT(var1, CONCAT(var2, CONCAT(var3, TOKEN))); DeleteIT_DLL_Val := KOSARTriggerDeleteCall('RAYS', KeyToDelete, 0); END LOOP;  CLOSE CRS1; END;",
		"CREATE OR REPLACE TRIGGER  IUSER_UPDATES334141 BEFORE INSERT ON USER_UPDATES FOR EACH ROW DECLARE DELETEKEY CLOB; KEYTODELETE CLOB; DeleteIT_DLL_Val BINARY_INTEGER;  BEGIN  USER_UPDATES334141(:NEW.USER_ID, :NEW.FRIEND_ID /*, DeleteKey*/);  END; ",
		"CREATE OR REPLACE TRIGGER  DUSER_UPDATES334141 BEFORE DELETE ON USER_UPDATES FOR EACH ROW DECLARE DELETEKEY CLOB; KEYTODELETE CLOB; DeleteIT_DLL_Val BINARY_INTEGER;  BEGIN  USER_UPDATES334141(:OLD.USER_ID, :OLD.FRIEND_ID /*, DeleteKey*/);  END; ",
		"CREATE OR REPLACE TRIGGER  UUSER_UPDATES334141 BEFORE UPDATE ON USER_UPDATES FOR EACH ROW DECLARE DELETEKEY CLOB; KEYTODELETE CLOB; DeleteIT_DLL_Val BINARY_INTEGER;  BEGIN  USER_UPDATES334141(:OLD.USER_ID, :OLD.FRIEND_ID /*, DeleteKey*/); IF (:NEW.USER_ID <> :OLD.USER_ID OR :NEW.FRIEND_ID <> :OLD.FRIEND_ID) THEN USER_UPDATES334141(:NEW.USER_ID, :NEW.FRIEND_ID /*, DeleteKey*/);  END IF; END; ",
		"CREATE OR REPLACE TRIGGER  Ufriends20678666 BEFORE UPDATE ON friends FOR EACH ROW DECLARE DeleteIT_DLL_Val BINARY_INTEGER; KeyToDelete  CLOB; /* DeleteKey CLOB; */ BEGIN KeyToDelete := ' ';  IF (:OLD.userid <> :NEW.userid OR :OLD.FRIENDID <> :NEW.FRIENDID OR :OLD.STATUS <> :NEW.STATUS) THEN  KeyToDelete := CONCAT('_6',CONCAT(:OLD.FRIENDID, CONCAT(:OLD.STATUS, :OLD.USERID))); DeleteIT_DLL_Val := KOSARTriggerDeleteCall('RAYS', KeyToDelete, 0); END IF; END;",
		"CREATE OR REPLACE TRIGGER  Dfriends20678666 BEFORE DELETE ON friends FOR EACH ROW DECLARE DeleteIT_DLL_Val BINARY_INTEGER; KeyToDelete  CLOB; /* DeleteKey CLOB; */ BEGIN KeyToDelete := ' ';  KeyToDelete := CONCAT('_6',CONCAT(:OLD.FRIENDID, CONCAT(:OLD.STATUS, :OLD.USERID)));DeleteIT_DLL_Val := KOSARTriggerDeleteCall('RAYS', KeyToDelete, 0); END;",
		"CREATE OR REPLACE TRIGGER  Ifriends20678666 BEFORE INSERT ON friends FOR EACH ROW DECLARE DeleteIT_DLL_Val BINARY_INTEGER; KeyToDelete  CLOB; /* DeleteKey CLOB; */ BEGIN KeyToDelete := ' ';  KeyToDelete := CONCAT('_6',CONCAT(:NEW.FRIENDID, CONCAT(:NEW.STATUS, :NEW.USERID))); DeleteIT_DLL_Val := KOSARTriggerDeleteCall('RAYS', KeyToDelete, 0); END;",
		"CREATE OR REPLACE TRIGGER  Ufriends20678666 BEFORE UPDATE ON friends FOR EACH ROW DECLARE DeleteIT_DLL_Val BINARY_INTEGER; KeyToDelete  CLOB; /* DeleteKey CLOB; */ BEGIN KeyToDelete := ' ';  IF (:OLD.userid <> :NEW.userid OR :OLD.FRIENDID <> :NEW.FRIENDID OR :OLD.STATUS <> :NEW.STATUS) THEN  KeyToDelete := CONCAT('_6',CONCAT(:OLD.FRIENDID, CONCAT(:OLD.STATUS, :OLD.USERID))); DeleteIT_DLL_Val := KOSARTriggerDeleteCall('RAYS', KeyToDelete, 0); END IF; END;",
		"CREATE OR REPLACE TRIGGER  Dfriends20678666 BEFORE DELETE ON friends FOR EACH ROW DECLARE DeleteIT_DLL_Val BINARY_INTEGER; KeyToDelete  CLOB; /* DeleteKey CLOB; */ BEGIN KeyToDelete := ' ';  KeyToDelete := CONCAT('_6',CONCAT(:OLD.FRIENDID, CONCAT(:OLD.STATUS, :OLD.USERID)));DeleteIT_DLL_Val := KOSARTriggerDeleteCall('RAYS', KeyToDelete, 0); END;",
		"CREATE OR REPLACE TRIGGER  Ifriends20678666 BEFORE INSERT ON friends FOR EACH ROW DECLARE DeleteIT_DLL_Val BINARY_INTEGER; KeyToDelete  CLOB; /* DeleteKey CLOB; */ BEGIN KeyToDelete := ' ';  KeyToDelete := CONCAT('_6',CONCAT(:NEW.FRIENDID, CONCAT(:NEW.STATUS, :NEW.USERID))); DeleteIT_DLL_Val := KOSARTriggerDeleteCall('RAYS', KeyToDelete, 0); END;",
		"CREATE OR REPLACE TRIGGER  Uuser_cameras0071277 BEFORE UPDATE ON user_cameras FOR EACH ROW DECLARE DeleteIT_DLL_Val BINARY_INTEGER; KeyToDelete  CLOB; /* DeleteKey CLOB; */ BEGIN KeyToDelete := ' ';  IF (:OLD.user_id <> :NEW.user_id) THEN  KeyToDelete := CONCAT('_7',:OLD.USER_ID); DeleteIT_DLL_Val := KOSARTriggerDeleteCall('RAYS', KeyToDelete, 0); END IF; END;",
		"CREATE OR REPLACE TRIGGER  Duser_cameras0071277 BEFORE DELETE ON user_cameras FOR EACH ROW DECLARE DeleteIT_DLL_Val BINARY_INTEGER; KeyToDelete  CLOB; /* DeleteKey CLOB; */ BEGIN KeyToDelete := ' ';  KeyToDelete := CONCAT('_7',:OLD.USER_ID);DeleteIT_DLL_Val := KOSARTriggerDeleteCall('RAYS', KeyToDelete, 0); END;",
		"CREATE OR REPLACE TRIGGER  Iuser_cameras0071277 BEFORE INSERT ON user_cameras FOR EACH ROW DECLARE DeleteIT_DLL_Val BINARY_INTEGER; KeyToDelete  CLOB; /* DeleteKey CLOB; */ BEGIN KeyToDelete := ' ';  KeyToDelete := CONCAT('_7',:NEW.USER_ID); DeleteIT_DLL_Val := KOSARTriggerDeleteCall('RAYS', KeyToDelete, 0); END;",
		"CREATE OR REPLACE TRIGGER  Uuser_cameras00161279 BEFORE UPDATE ON user_cameras FOR EACH ROW DECLARE DeleteIT_DLL_Val BINARY_INTEGER; KeyToDelete  CLOB; /* DeleteKey CLOB; */ BEGIN KeyToDelete := ' ';  IF (:OLD.camera_id <> :NEW.camera_id OR :OLD.USER_ID <> :NEW.USER_ID) THEN  KeyToDelete := CONCAT('_9',:OLD.USER_ID); DeleteIT_DLL_Val := KOSARTriggerDeleteCall('RAYS', KeyToDelete, 0); END IF; END;",
		"CREATE OR REPLACE TRIGGER  Duser_cameras00161279 BEFORE DELETE ON user_cameras FOR EACH ROW DECLARE DeleteIT_DLL_Val BINARY_INTEGER; KeyToDelete  CLOB; /* DeleteKey CLOB; */ BEGIN KeyToDelete := ' ';  KeyToDelete := CONCAT('_9',:OLD.USER_ID);DeleteIT_DLL_Val := KOSARTriggerDeleteCall('RAYS', KeyToDelete, 0); END;",
		"CREATE OR REPLACE TRIGGER  Iuser_cameras00161279 BEFORE INSERT ON user_cameras FOR EACH ROW DECLARE DeleteIT_DLL_Val BINARY_INTEGER; KeyToDelete  CLOB; /* DeleteKey CLOB; */ BEGIN KeyToDelete := ' ';  KeyToDelete := CONCAT('_9',:NEW.USER_ID); DeleteIT_DLL_Val := KOSARTriggerDeleteCall('RAYS', KeyToDelete, 0); END;"


		//		"CREATE OR REPLACE TRIGGER  Ufriends101876618 BEFORE UPDATE ON friends FOR EACH ROW DECLARE DeleteIT_DLL_Val BINARY_INTEGER; KeyToDelete  CLOB; /* DeleteKey CLOB; */ BEGIN KeyToDelete := ' ';  IF (:OLD.userid <> :NEW.userid OR :OLD.status <> :NEW.status OR :OLD.userid <> :NEW.userid) THEN  KeyToDelete := CONCAT('_18',CONCAT(:OLD.status, :OLD.userid)); DeleteIT_DLL_Val := KOSARTriggerDeleteCall('RAYS', KeyToDelete, 0); END IF; END;",
		//		"CREATE OR REPLACE TRIGGER  Ufriends101876818 BEFORE UPDATE ON friends FOR EACH ROW DECLARE DeleteIT_DLL_Val BINARY_INTEGER; KeyToDelete  CLOB; /* DeleteKey CLOB; */ BEGIN KeyToDelete := ' ';  IF (:OLD.userid <> :NEW.userid OR :OLD.status <> :NEW.status OR :OLD.friendid <> :NEW.friendid) THEN  KeyToDelete := CONCAT('_18',CONCAT(:OLD.status, :OLD.friendid)); DeleteIT_DLL_Val := KOSARTriggerDeleteCall('RAYS', KeyToDelete, 0); END IF; END;",
		//		"CREATE OR REPLACE TRIGGER  Ufriends101878618 BEFORE UPDATE ON friends FOR EACH ROW DECLARE DeleteIT_DLL_Val BINARY_INTEGER; KeyToDelete  CLOB; /* DeleteKey CLOB; */ BEGIN KeyToDelete := ' ';  IF (:OLD.userid <> :NEW.userid OR :OLD.friendid <> :NEW.friendid OR :OLD.status <> :NEW.status) THEN  KeyToDelete := CONCAT('_18',CONCAT(:OLD.friendid, :OLD.status)); DeleteIT_DLL_Val := KOSARTriggerDeleteCall('RAYS', KeyToDelete, 0); END IF; END;",
		//		"CREATE OR REPLACE TRIGGER  Ufriends101876618 BEFORE UPDATE ON friends FOR EACH ROW DECLARE DeleteIT_DLL_Val BINARY_INTEGER; KeyToDelete  CLOB; /* DeleteKey CLOB; */ BEGIN KeyToDelete := ' ';  IF (:OLD.userid <> :NEW.userid OR :OLD.userid <> :NEW.userid OR :OLD.status <> :NEW.status) THEN  KeyToDelete := CONCAT('_18',CONCAT(:OLD.userid, :OLD.status)); DeleteIT_DLL_Val := KOSARTriggerDeleteCall('RAYS', KeyToDelete, 0); END IF; END;",
		//		"CREATE OR REPLACE TRIGGER  UFRIENDS321835 BEFORE UPDATE ON FRIENDS FOR EACH ROW DECLARE DELETEKEY CLOB; KEYTODELETE CLOB; DeleteIT_DLL_Val BINARY_INTEGER;  BEGIN  FRIENDS321835(:OLD.STATUS, :OLD.USERID, :OLD.FRIENDID /*, DeleteKey*/);  FRIENDS321835(:NEW.STATUS, :NEW.USERID, :NEW.FRIENDID /*, DeleteKey*/);  END; ",
		//		"CREATE OR REPLACE TRIGGER  UFRIENDS321835 BEFORE UPDATE ON FRIENDS FOR EACH ROW DECLARE DELETEKEY CLOB; KEYTODELETE CLOB; DeleteIT_DLL_Val BINARY_INTEGER;  BEGIN  FRIENDS321835(:OLD.STATUS, :OLD.FRIENDID, :OLD.USERID /*, DeleteKey*/);  FRIENDS321835(:NEW.STATUS, :NEW.FRIENDID, :NEW.USERID /*, DeleteKey*/);  END; "
	};

	static String[] newsampleqrys = { 
		/*
		"create or replace "+
		"TRIGGER Uuser_cameras002112712 "+
		"BEFORE UPDATE ON user_cameras "+
		"FOR EACH ROW "+
		"DECLARE "+
		"ret_val BINARY_INTEGER; "+
		"KeyToDelete  CLOB; "+
		"BEGIN KeyToDelete := 'Hello'; "+
		"IF (:OLD.is_streaming <> :NEW.is_streaming OR :OLD.user_id <> :NEW.user_id) THEN  KeyToDelete := CONCAT('_12',:OLD.user_id); ret_val := KOSARTriggerDeleteCall('RAYS', KeyToDelete,0); "+ 
		"END IF; END;",




		"create or replace "+
		"TRIGGER UUSER_CAMERAS215724 "+
		"Before UPDATE ON USER_CAMERAS "+
		"FOR EACH ROW  BEGIN "+ 
		"USER_CAMERAS215724(:OLD.USER_ID, :OLD.IS_STREAMING);  "+
		"USER_CAMERAS215724(:NEW.USER_ID, :NEW.IS_STREAMING);  "+
		"END; ",




		"create or replace "+
		"TRIGGER UUSER_CAMERAS219727 "+
		"Before UPDATE ON USER_CAMERAS "+
		"FOR EACH ROW  BEGIN  "+
		"USER_CAMERAS219727(:OLD.CATID, :OLD.USER_ID); "+ 
		"USER_CAMERAS219727(:NEW.CATID, :NEW.USER_ID);  "+
		"END; ",



		"create or replace "+
		"TRIGGER UUSER_CAMERAS226431 "+
		"Before UPDATE ON USER_CAMERAS "+
		"FOR EACH ROW  BEGIN  "+
		"USER_CAMERAS226431(:OLD.USER_ID, :OLD.IS_STREAMING);  "+
		"USER_CAMERAS226431(:NEW.USER_ID, :NEW.IS_STREAMING);  "+
		"END; ",



		"create or replace "+
		"TRIGGER UUSER_CAMERAS321835 "+
		"Before UPDATE ON USER_CAMERAS "+
		"FOR EACH ROW  BEGIN  "+
		"USER_CAMERAS321835(:OLD.IS_STREAMING, :OLD.USER_ID); "+ 
		"USER_CAMERAS321835(:NEW.IS_STREAMING, :NEW.USER_ID);  "+
		"END; ",


		"create or replace "+
		"TRIGGER UUSER_CAMERAS32935 "+
		"Before UPDATE ON USER_CAMERAS "+
		"FOR EACH ROW  BEGIN  "+
		"USER_CAMERAS32935(:OLD.IS_STREAMING, :OLD.USER_ID);  "+
		"USER_CAMERAS32935(:NEW.IS_STREAMING, :NEW.USER_ID);  "+
		"END; ",



		"create or replace "+
		"TRIGGER UUSER_CAMERAS334141 "+
		"Before UPDATE ON USER_CAMERAS "+
		"FOR EACH ROW "+ 
		"BEGIN  "+
		"USER_CAMERAS334141(:OLD.PRIVACY, :OLD.USER_ID, :OLD.IS_STREAMING);  "+
		"USER_CAMERAS334141(:NEW.PRIVACY, :NEW.USER_ID, :NEW.IS_STREAMING);  "+
		"END;" */

		"CREATE OR REPLACE PROCEDURE  RECOMMENDED_VIDEOS1221545 (arg1 IN RECOMMENDED_VIDEOS.RECOMMENDED_TO%TYPE) IS TOKEN CLOB := TO_CLOB('UC.VIRTUAL_CLIP_ID=RV.VIRTUAL_CLIP_IDU.USER_ID=RV.RECOMMENDED_TO');DeleteIT_DLL_Val BINARY_INTEGER;KeyToDelete CLOB; BEGIN KeyToDelete := CONCAT(arg1, TOKEN); DeleteIT_DLL_Val := KOSARTriggerDeleteCall('RAYS', KeyToDelete, 0);END;",
		"CREATE OR REPLACE TRIGGER  IRECOMMENDED_VIDEOS1221545 BEFORE INSERT ON RECOMMENDED_VIDEOS FOR EACH ROW  BEGIN  RECOMMENDED_VIDEOS1221545(:NEW.RECOMMENDED_TO);  END; ",
		"CREATE OR REPLACE TRIGGER  DRECOMMENDED_VIDEOS1221545 BEFORE DELETE ON RECOMMENDED_VIDEOS FOR EACH ROW  BEGIN  RECOMMENDED_VIDEOS1221545(:OLD.RECOMMENDED_TO);  END; ",
		"CREATE OR REPLACE TRIGGER  URECOMMENDED_VIDEOS1221545 BEFORE UPDATE ON RECOMMENDED_VIDEOS FOR EACH ROW  BEGIN  RECOMMENDED_VIDEOS1221545(:OLD.RECOMMENDED_TO);  RECOMMENDED_VIDEOS1221545(:NEW.RECOMMENDED_TO);  END; ",
		"CREATE OR REPLACE PROCEDURE  USER_CLIPS1221545 (InArg1 IN USER_CLIPS.VIRTUAL_CLIP_ID%TYPE)  IS var1  RECOMMENDED_VIDEOS.RECOMMENDED_TO%TYPE;  TOKEN CLOB := TO_CLOB('UC.VIRTUAL_CLIP_ID=RV.VIRTUAL_CLIP_IDU.USER_ID=RV.RECOMMENDED_TO'); DeleteIT_DLL_Val BINARY_INTEGER; KeyToDelete CLOB;  CURSOR CRS1 IS SELECT RECOMMENDED_VIDEOS.RECOMMENDED_TO FROM USERS, RECOMMENDED_VIDEOS WHERE RECOMMENDED_VIDEOS.VIRTUAL_CLIP_ID=InArg1 AND  USERS.USER_ID=RECOMMENDED_VIDEOS.RECOMMENDED_TO ;  BEGIN  OPEN CRS1;  LOOP  FETCH CRS1 into var1;  EXIT WHEN CRS1%NOTFOUND; KeyToDelete := CONCAT(var1, TOKEN); DeleteIT_DLL_Val := KOSARTriggerDeleteCall('RAYS', KeyToDelete, 0); END LOOP;  CLOSE CRS1; END;",
		"CREATE OR REPLACE TRIGGER  IUSER_CLIPS1221545 BEFORE INSERT ON USER_CLIPS FOR EACH ROW  BEGIN  USER_CLIPS1221545(:NEW.VIRTUAL_CLIP_ID);  END; ",
		"CREATE OR REPLACE TRIGGER  DUSER_CLIPS1221545 BEFORE DELETE ON USER_CLIPS FOR EACH ROW  BEGIN  USER_CLIPS1221545(:OLD.VIRTUAL_CLIP_ID);  END; ",
		"CREATE OR REPLACE TRIGGER  UUSER_CLIPS1221545 BEFORE UPDATE ON USER_CLIPS FOR EACH ROW  BEGIN  USER_CLIPS1221545(:OLD.VIRTUAL_CLIP_ID);  USER_CLIPS1221545(:NEW.VIRTUAL_CLIP_ID);  END; ",
		"CREATE OR REPLACE PROCEDURE  USERS1221545 (InArg1 IN USERS.USER_ID%TYPE)  IS var1  RECOMMENDED_VIDEOS.RECOMMENDED_TO%TYPE;  TOKEN CLOB := TO_CLOB('UC.VIRTUAL_CLIP_ID=RV.VIRTUAL_CLIP_IDU.USER_ID=RV.RECOMMENDED_TO'); DeleteIT_DLL_Val BINARY_INTEGER; KeyToDelete CLOB;  CURSOR CRS1 IS SELECT RECOMMENDED_VIDEOS.RECOMMENDED_TO FROM USER_CLIPS, RECOMMENDED_VIDEOS WHERE  USER_CLIPS.VIRTUAL_CLIP_ID=RECOMMENDED_VIDEOS.VIRTUAL_CLIP_ID  AND RECOMMENDED_VIDEOS.RECOMMENDED_TO=InArg1;  BEGIN  OPEN CRS1;  LOOP  FETCH CRS1 into var1;  EXIT WHEN CRS1%NOTFOUND; KeyToDelete := CONCAT(var1, TOKEN); DeleteIT_DLL_Val := KOSARTriggerDeleteCall('RAYS', KeyToDelete, 0); END LOOP;  CLOSE CRS1; END;",
		"CREATE OR REPLACE TRIGGER  IUSERS1221545 BEFORE INSERT ON USERS FOR EACH ROW  BEGIN  USERS1221545(:NEW.USER_ID);  END; ",
		"CREATE OR REPLACE TRIGGER  DUSERS1221545 BEFORE DELETE ON USERS FOR EACH ROW  BEGIN  USERS1221545(:OLD.USER_ID);  END; ",
		"CREATE OR REPLACE TRIGGER  UUSERS1221545 BEFORE UPDATE ON USERS FOR EACH ROW  BEGIN  USERS1221545(:OLD.USER_ID);  USERS1221545(:NEW.USER_ID);  END; "
	};

	public String InArg = "DELETEKEY";
	public String ProcedureArgument = ", "+InArg+" IN OUT CLOB";

	public String CosarDeleteCall = "DeleteIT_DLL_Val := KOSARTriggerDeleteCall('RAYS', KEYTODELETE, 0);";

	public static String TargetInsertTable(String trigger){
		int start = trigger.indexOf(otg.insert);
		String result = null;
		int end;
		if (start >= 0){
			result = trigger.substring( start+otg.insert.length() );
			result = result.trim();
			end = result.indexOf(" ");
			result = result.substring(0,end);
		}
		return result;
	}

	public static String TargetDeleteTable(String trigger){
		int start = trigger.indexOf(otg.delete);
		String result = null;
		int end;
		if (start >= 0){
			result = trigger.substring( start+otg.delete.length() );
			result = result.trim();
			end = result.indexOf(" ");
			result = result.substring(0,end);
		}
		return result;
	}

	public static String TargetUpdateTable(String trigger){
		int start = trigger.indexOf(otg.update);
		String result = null;
		int end;
		if (start >= 0){
			result = trigger.substring( start+otg.update.length() );
			result = result.trim();
			end = result.indexOf(" ");
			result = result.substring(0,end);
		}
		return result;
	}

	public String DeleteMeMergeTriggers(Vector<String> tz){
		StringBuffer Merged = new StringBuffer();
		int bodystarts, bodyends;
		String result = null;
		String elt;
		Vector<String> C = new Vector<String>();
		Vector<String> S = new Vector<String>();
		HashMap<String,String> procs = new HashMap<String,String>();


		//Iterate on elements of tz
		for (int i=0; i < tz.size(); i++){
			elt = tz.elementAt(i).toUpperCase();
			if (elt.indexOf(otg.BeginVariableDec) >= 0) C.add(elt);
			else S.add(elt);
		}
		//Note that they reference the same table
		//We assume the complex one use the same variables.  Hence:
		//Maintain the header of one and merge in the body of the rest.
		if (C.size() > 0) {
			elt = C.elementAt(0);
			Merged.append( elt.substring(0, elt.indexOf(otg.EndVariableDec)+otg.EndVariableDec.length() ) );
		} else {
			elt = S.elementAt(0);
			Merged.append( elt.substring(0, elt.indexOf(otg.EndVariableDec)+otg.EndVariableDec.length() ));
		}
		//Merge the body of the triggers into one and maintain the variables once.
		for (int i=0; i < C.size(); i++){
			elt = C.elementAt(i);
			bodystarts = elt.indexOf(otg.EndVariableDec) + otg.EndVariableDec.length();
			bodyends = elt.indexOf(otg.EndTrigger);
			String body = elt.substring(bodystarts, bodyends);
			Merged.append( elt.substring(bodystarts, bodyends) );
		}
		for (int i=0; i < S.size(); i++){
			elt = S.elementAt(i);
			bodystarts = elt.indexOf(otg.EndVariableDec) + otg.EndVariableDec.length();
			bodyends = elt.indexOf(otg.EndTrigger);

			//Parse the procedure calls and eliminate duplicates using a hash map.
			String procedures = elt.substring(bodystarts, bodyends);
			boolean comp = false;
			int procstarts = 0;
			int procends = procedures.length();
			while (comp != true){
				procends = procedures.substring(procstarts,procends).indexOf(";")+1;
				String proccall = procedures.substring(procstarts,procends);
				String found = procs.get(proccall);
				if (found == null){
					Merged.append( proccall );
					procs.put(proccall, "1");
				}
			}

			//Merged.append( elt.substring(bodystarts, bodyends));
		}
		if (Merged.length() > 0){
			Merged.append(otg.EndTrigger);
			result = Merged.toString();
		}
		return result;
	}

	public static String MergeTriggers(Vector<String> tz){
		if (verbose){
			System.out.println("MergeTriggers");
			for (int i = 0; i < tz.size(); i++)
				System.out.println("\t "+tz.elementAt(i));
		}
		StringBuffer Merged = new StringBuffer();
		int bodystarts=-1, bodyends=-1;
		boolean InsertDivider = false;
		String result = null;
		String elt;
		HashMap<String,String> procs = new HashMap<String,String>();
		HashMap<String,Vector<String>> ifs = new HashMap<String,Vector<String> >();
		HashMap<String,String> concats = new HashMap<String,String>();
		HashMap<String,String> df = new HashMap<String,String>();

		for (int i = 0; i < tz.size(); i++){
			elt =tz.elementAt(i).toUpperCase();
			if (elt.indexOf(otg.BeginVariableDec) >= 0){
				Merged.append( elt.substring(0, elt.indexOf(otg.EndVariableDec)+otg.EndVariableDec.length() ) + " DELETEKEY := ' '; KEYTODELETE := ' '; ");
				break;
			}
		}

		for (int i=0; i < tz.size(); i++){
			elt = tz.elementAt(i); //.toUpperCase();
			bodystarts = elt.indexOf(otg.EndVariableDec) + otg.EndVariableDec.length();
			bodyends = elt.indexOf(otg.EndTrigger);

			//Parse the procedure calls and eliminate duplicates using a hash map.
			String procedureBody=elt;
			if (bodystarts >=0 && bodyends >= 0)
				procedureBody = elt.substring(bodystarts, bodyends);

			boolean comp = false;
			int procstarts = 0;
			int procends = procedureBody.length();
			while (comp != true){
				procends = procedureBody.substring(procstarts,procends).indexOf(";")+1;
				if (procends <= 1){
					comp = true;
					continue;
				}
				String proccall = procedureBody.substring(procstarts,procstarts+procends).trim();
				if (proccall.indexOf("IF (DELETEKEY != ' ') THEN D") == 0 || proccall.indexOf("IF (DELETEKEY != ' ') THEN  D") == 0){
					int firstEndIf = procedureBody.substring(procstarts).indexOf(" END IF;") + " END IF;".length();
					procstarts += firstEndIf;
					String remainder = procedureBody.substring(procstarts);
					int secEndIf = remainder.indexOf(" END IF;");
					procstarts += secEndIf + " END IF;".length();
				} else if (proccall.indexOf("IF ") >= 0){
					int ifstart = proccall.indexOf("(")+1;
					int ifends = proccall.indexOf(")");
					String predicate = proccall.substring(ifstart, ifends).trim();

					//Advance the pointer
					procstarts += procedureBody.substring(procstarts,procstarts+procends).indexOf(")");

					//Take the whole body of the if statement
					ifstart = procedureBody.substring(procstarts).indexOf(" THEN ") + " THEN ".length();
					ifends = procedureBody.substring(procstarts+ifstart).indexOf(" END IF; ");

					String body = procedureBody.substring(procstarts+ifstart, procstarts+ifstart+ifends).trim();
					//if (body.contains("513")) System.out.println("body "+body);
					procstarts += ifstart+ifends;
					//String body = proccall.substring(0, ifends).trim();

					Vector<String> found = ifs.get(predicate);
					if (found == null){
						Vector<String> V = new Vector<String>();
						V.add(body);
						ifs.put(predicate, V);
					}
					else {
						boolean exists = false;
						for (int k=0; k <found.size(); k++)
							if (found.elementAt(k).contains(body)) exists = true;
						if (! exists)
							found.add(body);
					}
					//ifends = procedureBody.substring(procstarts,procstarts+procends).indexOf(" END IF; ");
					procstarts += " END IF; ".length();
				} else if (proccall.indexOf("KEYTODELETE := ' '") >= 0 || proccall.indexOf("DeleteIT_DLL_Val := COSAR") >= 0 || proccall.indexOf("DELETEKEY := ' '") >= 0 ){
					//Drop tokens for KEYTODELETE
					procstarts += procends;

				} else if (proccall.indexOf("KEYTODELETE := CONCAT") >= 0){
					concats.put(proccall, "1");
					procstarts += procends;
				} else if (proccall.indexOf("DELETEKEY := CONCAT(DELETEKEY, ")>= 0){
					df.put(proccall, "1");
					procstarts += procends;
				} else {
					String found = procs.get(proccall);
					if (found == null){
						Merged.append( proccall );
						procs.put(proccall, "1");
						InsertDivider = true; //If there is a follow-on then place dividers
					}
					procstarts += procends;
				}
				procends = procedureBody.length();
				if (procstarts >= procends) comp = true;
			}
		}

		Set<String> dfelt = df.keySet();
		for (String c : dfelt)
		{
			if ((c.indexOf("DELETEKEY := CONCAT(DELETEKEY, ' ');") < 0 && c.indexOf("DELETEKEY := CONCAT(DELETEKEY, CONCAT(' ', KEYTODELETE));") < 0)){
				if (InsertDivider){
					Merged.append(" DELETEKEY := CONCAT(DELETEKEY, ' ');");
				} else if (df.size() > 1) InsertDivider = true;
				Merged.append(c);
			}
		}

		Set<String> concat = concats.keySet();
		for ( String c : concat)
		{
			int stidx = c.indexOf("CONCAT");
			int eidx = c.indexOf(";");
			String cc = c.substring(stidx, eidx);
			if (InsertDivider) {
				Merged.append(" DELETEKEY := CONCAT(DELETEKEY, ' ');");
			} else if (concat.size() > 1) InsertDivider = true;
			Merged.append(" DELETEKEY := CONCAT(DELETEKEY, "+cc+");");
			//Merged.append(" DELETEKEY := CONCAT(DELETEKEY, ' ');");
		}

		if (InsertDivider && ifs.keySet().size() > 0) //Insert a space if there is more to come
			Merged.append(" DELETEKEY := CONCAT(DELETEKEY, ' ');");

		Set<String> keys = ifs.keySet();
		//		String body;
		//		for ( String key : keys)
		//		{
		//			body = ifs.get(key);
		//			if (body.indexOf("KOSARTriggerDeleteMultiCall") < 0) Merged.append(" IF ("+key+") THEN "+body+" END IF; ");
		//		}

		for ( String key : keys)
		{
			Vector<String> bd = ifs.get(key);
			if (bd == null){
				System.out.println("Error, body of the if statement is empty.  Condition is "+key);
				continue;
			} else {
				if (bd.size() == 1 && bd.elementAt(0).indexOf("KOSARTriggerDeleteMultiCall") >= 0) ;
				else {
					Merged.append(" IF ("+key+") THEN ");
					if (bd.size() == 1)
						Merged.append(" "+bd.elementAt(0));
					else{
						//Eliminate duplicate procedure calls and invocations across different if statements
						Merged.append(MergeTriggers(bd));
					}
					Merged.append(" END IF; ");
				}
			}
		}

		if (Merged.length() > 0 && bodystarts >=0 && bodyends >= 0){
			Merged.append(otg.EndTrigger);  //No need for an End if we are in recursion
		}

		return Merged.toString();
	}

	public static String RewriteProc(String proc){
		String newst = proc.replaceAll("/[*], DELETEKEY IN OUT CLOB[*]/", ", DELETEKEY IN OUT CLOB");
		newst = newst.replaceAll("DeleteIT_DLL_Val BINARY_INTEGER;", "");
		newst = newst.replaceAll("DeleteIT_DLL_Val := KOSARTriggerDeleteCall[(]'RAYS', KEYTODELETE, 0[)];", "DeleteKey := CONCAT(DELETEKEY, CONCAT(' ', KEYTODELETE));".toUpperCase());
		return newst;
	}

	public static void OptimizeProcs(Vector<String> procs, Vector<String> outV){
		//For each procedure, extend its argument to consume a Delete key as an input argument
		//Replace the text of KOSARTriggerDeleteCall with the concat call.
		for (int i = 0; i < procs.size(); i++){
			outV.add(RewriteProc(procs.elementAt(i)));
		}
	}

	public static String OptimizeTrigger(String trig){
		trig = trig.replaceAll("/[*] DELETEKEY CLOB; [*]/", " DELETEKEY CLOB;");
		trig = trig.replaceAll("BEGIN KEYTODELETE", "BEGIN DELETEKEY := ' '; KEYTODELETE");
		trig = trig.replaceAll("DELETEKEY := ' '; DELETEKEY := CONCAT(DELETEKEY, ' ');", "DELETEKEY := ' ';");
		//trig = trig.replaceAll("/* DeleteKey IN OUT CLOB; */".toUpperCase(), "DeleteKey IN OUT CLOB;".toUpperCase());
		//trig = trig.replaceAll("/[*]DeleteKey := ' ';[*]/".toUpperCase(), "DeleteKey := ' ';".toUpperCase());
		trig = trig.replaceAll("/[*], DELETEKEY[*]/", ", DELETEKEY");
		trig = trig.replaceAll("DeleteIT_DLL_Val := KOSARTriggerDeleteCall[(]'RAYS', KEYTODELETE, 0[)];", "DeleteKey := CONCAT(DeleteKey, CONCAT(' ', KeyToDelete));".toUpperCase());
		
		if (KosarSoloDriver.flags.coordinatorExists())
			trig = trig.replaceAll("END;", "IF (DELETEKEY != ' ') THEN  DeleteIT_DLL_Val := KOSARServerTrigDelMulti('"+KosarSoloDriver.getCoreAddress()+"', 'RAYS', DELETEKEY, 0); IF (DeleteIT_DLL_Val != 0) THEN RAISE_APPLICATION_ERROR( -20001, CONCAT(DeleteIT_DLL_Val,'Failed to connect to KOSAR KVS CORE.')); END IF; END IF; END;");
		else if (!QueryToTrigger.getIPport().equals(""))
			trig = trig.replaceAll("END;", "IF (DELETEKEY != ' ') THEN  DeleteIT_DLL_Val := KOSARTriggerDeleteMultiCall('"+QueryToTrigger.getIPport()+"', 'RAYS', DELETEKEY, 0); IF (DeleteIT_DLL_Val != 0) THEN RAISE_APPLICATION_ERROR( -20001, CONCAT(DeleteIT_DLL_Val,'Failed to connect to KOSAR KVS CORE.')); END IF; END IF; END;");

		return trig;
	}

	public static void Optimize(Vector<String> inV, Vector<String> outV, int Level){
		String elt;
		Vector<String> InsertTrigs = new Vector<String>();
		Vector<String> DeleteTrigs = new Vector<String>();
		Vector<String> UpdateTrigs = new Vector<String>();

		Vector<String> tz = new Vector<String>();
		Vector<String> procs = new Vector<String>();

		String tgtTable, optTrigger;
		
		if (inV == null){
			System.out.println("Error (OracleOptimizeTriggers:Optimize):  Input Vector of triggers/procedures is null.");
			System.out.println("Suggested fix:  Pass in a vector populated by the QueryToTrigger with triggers/procedures.");
			return;
		}
		if (outV == null){
			System.out.println("Error (OracleOptimizeTriggers:Optimize):  Output vector of triggers/procedures is null.");
			System.out.println("Suggested fix:  Initialize a vector and pass it in.  Optimize populates this outV with a re-write of triggers.");
			return;
		}

		if (Level < 1 || Level > 2){
			//Simply copy the vectors and return
			for (int i = 0; i < inV.size(); i++) 
				outV.addElement(inV.elementAt(i));

			return;
		}
		
		//Make a pass of inV to (a) push all the stored procedures into outV and (b) construct a vector of triggers
		for (int i =0; i < inV.size(); i++){
			elt = inV.elementAt(i); //.toUpperCase();
			if (elt.indexOf(otg.StartProc) >=0 && Level == 1){
				outV.add(elt);
			}
			if (elt.indexOf(otg.StartProc) >=0 && Level == 2){
				procs.add(elt);
			}

			if (elt.indexOf(otg.StartTrig) >=0){
				if (elt.indexOf(otg.insert) >= 0){
					InsertTrigs.add(elt);
				}
				else if (elt.indexOf(otg.delete) >=0 ){
					DeleteTrigs.add(elt);
				}
				else if (elt.indexOf(otg.update) >=0 ){
					UpdateTrigs.add(elt);
				}
				else System.out.println("Error (OracleOptimizeTriggers:Optimize): trigger not recognized.");
			}
		}

		if (Level==2){
			OptimizeProcs(procs, outV);
		}

		while (InsertTrigs.size() > 0){
			int i = InsertTrigs.size()-1;
			int tgt = i;
			tz = new Vector<String>();
			//			Vector<String> ks = new Vector<String>();
			//			String LastKey = InsertKeys.elementAt(i);
			//			ks.add(LastKey);
			//Get Trigger name
			elt = InsertTrigs.elementAt(i);
			tgtTable = TargetInsertTable(elt);

			//Collect all triggers with the same name
			for ( ; i >= 0; i--){
				elt = InsertTrigs.elementAt(i);
				String newtgt = TargetInsertTable(elt);
				if (newtgt.equals(tgtTable)){
					tz.add(elt);
					InsertTrigs.removeElementAt(i);
					//				
					//					if (! InsertKeys.elementAt(i).equals(LastKey)){
					//						LastKey = InsertKeys.elementAt(i);
					//						ks.add(LastKey);
					//					}
					//					InsertKeys.removeElementAt(i);
				}
			}

			//If the count of these triggers is one then there is no need for optimization
			if (tz.size() == 1) {
				outV.add(tz.elementAt(0));
			}
			//Otherwise, optimize and insert the final trigger into outV 
			else {
				optTrigger = MergeTriggers(tz);
				outV.add(optTrigger);
				//				for (int j = 0; j < ks.size(); j++){
				//					outV.add(optTrigger);
				//					outKey.add(ks.elementAt(j));
				//				}
			}
			//InsertTrigs.removeElementAt(tgt);
		}

		while (DeleteTrigs.size() > 0){
			int i = DeleteTrigs.size()-1;
			int tgt = i;
			tz = new Vector<String>();
			//			Vector<String> ks = new Vector<String>();
			//			String LastKey = DeleteKeys.elementAt(i);
			//			ks.add(LastKey);
			//Get Trigger name
			elt = DeleteTrigs.elementAt(i);
			tgtTable = TargetDeleteTable(elt);
			//Collect all triggers with the same name
			for ( ; i >= 0; i--){
				elt = DeleteTrigs.elementAt(i);
				String newtgt = TargetDeleteTable(elt);
				if (newtgt.equals(tgtTable)) {
					tz.add(elt);
					DeleteTrigs.removeElementAt(i);

					//					if (! DeleteKeys.elementAt(i).equals(LastKey)){
					//						LastKey = DeleteKeys.elementAt(i);
					//						ks.add(LastKey);
					//					}
					//					DeleteKeys.removeElementAt(i);
				}
			}
			//If the count of these triggers is one then there is no need for optimization
			if (tz.size() == 1) {
				outV.add(tz.elementAt(0));
			}
			//Otherwise, optimize and insert the final trigger into outV 
			else {
				optTrigger = MergeTriggers(tz);
				outV.add(optTrigger);
				//				for (int j = 0; j < ks.size(); j++){
				//					outV.add(optTrigger);
				//				}
			}
			//DeleteTrigs.removeElementAt(tgt);
		}

		while (UpdateTrigs.size() > 0){
			int i = UpdateTrigs.size()-1;
			int tgt = i;
			tz = new Vector<String>();
			//			Vector<String> ks = new Vector<String>();
			//			String LastKey = UpdateKeys.elementAt(i);
			//			ks.add(LastKey);
			//Get Trigger name
			elt = UpdateTrigs.elementAt(i);
			tgtTable = TargetUpdateTable(elt);
			//Collect all triggers with the same name
			for ( ; i >= 0; i--){
				elt = UpdateTrigs.elementAt(i);
				String newtgt = TargetUpdateTable(elt);
				if (newtgt.equals(tgtTable)){
					tz.add(elt);
					UpdateTrigs.removeElementAt(i);

					//					if (! UpdateKeys.elementAt(i).equals(LastKey)){
					//						LastKey = UpdateKeys.elementAt(i);
					//						ks.add(LastKey);
					//					}
					//UpdateKeys.removeElementAt(i);
				}
			}
			//If the count of these triggers is one then there is no need for optimization
			if (tz.size() == 1) {
				outV.add(tz.elementAt(0));
			}
			//Otherwise, optimize and insert the final trigger into outV 
			else {
				optTrigger=MergeTriggers(tz);
				outV.add(optTrigger);
				//				for (int j = 0; j < ks.size(); j++){
				//					outV.add(optTrigger);
				//				}
			}
			//UpdateTrigs.removeElementAt(tgt);
		}

		if (Level == 2){
			for (int i = 0; i < outV.size(); i++){
				if (outV.elementAt(i).indexOf(otg.StartTrig) >=0)
					outV.setElementAt(OptimizeTrigger(outV.elementAt(i)), i);
			}
		}

		return;
	}

	public void OldOptimize(Vector<String> inV, Vector<String> outV, Vector<String> inKey, Vector<String> outKey, int Level){
		String elt;
		Vector<String> InsertTrigs = new Vector<String>();
		Vector<String> DeleteTrigs = new Vector<String>();
		Vector<String> UpdateTrigs = new Vector<String>();

		Vector<String> InsertKeys = new Vector<String>();
		Vector<String> DeleteKeys = new Vector<String>();
		Vector<String> UpdateKeys = new Vector<String>();

		Vector<String> tz = new Vector<String>();
		Vector<String> tzkey = new Vector<String>();

		Vector<String> procs = new Vector<String>();
		Vector<String> procskey = new Vector<String>();

		String tgtTable, optTrigger;

		if (Level < 1 || Level > 2){
			//Simply copy the vectors and return
			for (int i = 0; i < inV.size(); i++) outV.addElement(inV.elementAt(i));

			for (int i = 0; i < inKey.size(); i++) outKey.addElement(inKey.elementAt(i));
			return;
		}

		//		if (Level < 1 || Level > 2){
		//			System.out.println("Error, Level value "+Level+" is not recognized and returning.");
		//			System.out.println("Optimize supports only two levels of optimizations:");
		//			System.out.println("\tLevel 1:  Multiple triggers on the same table are merged into one.\n");
		//			System.out.println("\tLevel 2:  Keys produced by different procedures referenced by a trigger are merged into one COSAR delete call.\n");
		//			System.out.println("To fix the error, ensure that Optimize method of OracleOptimizeTrigg is invoked with either 1 or 2 as the value of Level");
		//			return;
		//		}

		if (inV.size() != inKey.size()){
			System.out.println("Error (OracleOptimizeTriggers:Optimize):  Number of triggers "+inV.size()+" does not match the number of keys "+inKey.size());
			System.out.println("These must match in order for the optimization to proceed forward.");
			if (inV.size() > inKey.size())
				System.out.println("Suggested solution:  Generate duplicate keys by repeating them to match the size of the two vectors.");
			else System.out.println("Suggested solution:  Generate duplicate triggers by repeating their body such that their total number matches the number of keys");
		}

		if (inV == null){
			System.out.println("Error (OracleOptimizeTriggers:Optimize):  Input Vector of triggers/procedures is null.");
			System.out.println("Suggested fix:  Pass in a vector populated by the QueryToTrigger with triggers/procedures.");
			return;
		}
		if (outV == null){
			System.out.println("Error (OracleOptimizeTriggers:Optimize):  Output vector of triggers/procedures is null.");
			System.out.println("Suggested fix:  Initialize a vector and pass it in.  Optimize populates this outV with a re-write of triggers.");
			return;
		}



		//Make a pass of inV to (a) push all the stored procedures into outV and (b) construct a vector of triggers
		for (int i =0; i < inV.size(); i++){
			elt = inV.elementAt(i); //.toUpperCase();
			if (elt.indexOf(otg.StartProc) >=0 && Level == 1){
				outV.add(elt);
				outKey.add(inKey.elementAt(i));
			}
			if (elt.indexOf(otg.StartProc) >=0 && Level == 2){
				procs.add(elt);
				procskey.add(inKey.elementAt(i));
			}

			if (elt.indexOf(otg.StartTrig) >=0){
				if (elt.indexOf(otg.insert) >= 0){
					InsertTrigs.add(elt);
					InsertKeys.add(inKey.elementAt(i));
				}
				else if (elt.indexOf(otg.delete) >=0 ){
					DeleteTrigs.add(elt);
					DeleteKeys.add(inKey.elementAt(i));
				}
				else if (elt.indexOf(otg.update) >=0 ){
					UpdateTrigs.add(elt);
					UpdateKeys.add(inKey.elementAt(i));
				}
				else System.out.println("Error (OracleOptimizeTriggers:Optimize): trigger not recognized.");
			}
		}

		if (Level==2){
			OptimizeProcs(procs, outV);
			for (int i = 0; i < procs.size(); i++){
				outKey.add(procskey.elementAt(i));
			}
		}

		while (InsertTrigs.size() > 0){
			int i = InsertTrigs.size()-1;
			int tgt = i;
			tz = new Vector<String>();
			Vector<String> ks = new Vector<String>();
			String LastKey = InsertKeys.elementAt(i);
			ks.add(LastKey);
			//Get Trigger name
			elt = InsertTrigs.elementAt(i);
			tgtTable = TargetInsertTable(elt);

			//Collect all triggers with the same name
			for ( ; i >= 0; i--){
				elt = InsertTrigs.elementAt(i);
				String newtgt = TargetInsertTable(elt);
				if (newtgt.equals(tgtTable)){
					tz.add(elt);
					InsertTrigs.removeElementAt(i);

					if (! InsertKeys.elementAt(i).equals(LastKey)){
						LastKey = InsertKeys.elementAt(i);
						ks.add(LastKey);
					}
					InsertKeys.removeElementAt(i);
				}
			}

			//If the count of these triggers is one then there is no need for optimization
			if (tz.size() == 1) {
				outV.add(tz.elementAt(0));
				outKey.add(ks.elementAt(0));
			}
			//Otherwise, optimize and insert the final trigger into outV 
			else {
				optTrigger = MergeTriggers(tz);
				for (int j = 0; j < ks.size(); j++){
					outV.add(optTrigger);
					outKey.add(ks.elementAt(j));
				}
			}
			//InsertTrigs.removeElementAt(tgt);
		}

		while (DeleteTrigs.size() > 0){
			int i = DeleteTrigs.size()-1;
			int tgt = i;
			tz = new Vector<String>();
			Vector<String> ks = new Vector<String>();
			String LastKey = DeleteKeys.elementAt(i);
			ks.add(LastKey);
			//Get Trigger name
			elt = DeleteTrigs.elementAt(i);
			tgtTable = TargetDeleteTable(elt);
			//Collect all triggers with the same name
			for ( ; i >= 0; i--){
				elt = DeleteTrigs.elementAt(i);
				String newtgt = TargetDeleteTable(elt);
				if (newtgt.equals(tgtTable)) {
					tz.add(elt);
					DeleteTrigs.removeElementAt(i);

					if (! DeleteKeys.elementAt(i).equals(LastKey)){
						LastKey = DeleteKeys.elementAt(i);
						ks.add(LastKey);
					}
					DeleteKeys.removeElementAt(i);
				}
			}
			//If the count of these triggers is one then there is no need for optimization
			if (tz.size() == 1) {
				outV.add(tz.elementAt(0));
				outKey.add(ks.elementAt(0));
			}
			//Otherwise, optimize and insert the final trigger into outV 
			else {
				optTrigger = MergeTriggers(tz);
				for (int j = 0; j < ks.size(); j++){
					outV.add(optTrigger);
					outKey.add(ks.elementAt(j));
				}
			}
			//DeleteTrigs.removeElementAt(tgt);
		}

		while (UpdateTrigs.size() > 0){
			int i = UpdateTrigs.size()-1;
			int tgt = i;
			tz = new Vector<String>();
			Vector<String> ks = new Vector<String>();
			String LastKey = UpdateKeys.elementAt(i);
			ks.add(LastKey);
			//Get Trigger name
			elt = UpdateTrigs.elementAt(i);
			tgtTable = TargetUpdateTable(elt);
			//Collect all triggers with the same name
			for ( ; i >= 0; i--){
				elt = UpdateTrigs.elementAt(i);
				String newtgt = TargetUpdateTable(elt);
				if (newtgt.equals(tgtTable)){
					tz.add(elt);
					UpdateTrigs.removeElementAt(i);

					if (! UpdateKeys.elementAt(i).equals(LastKey)){
						LastKey = UpdateKeys.elementAt(i);
						ks.add(LastKey);
					}
					UpdateKeys.removeElementAt(i);
				}
			}
			//If the count of these triggers is one then there is no need for optimization
			if (tz.size() == 1) {
				outV.add(tz.elementAt(0));
				outKey.add(ks.elementAt(0));
			}
			//Otherwise, optimize and insert the final trigger into outV 
			else {
				optTrigger=MergeTriggers(tz);
				for (int j = 0; j < ks.size(); j++){
					outV.add(optTrigger);
					outKey.add(ks.elementAt(j));
				}
			}
			//UpdateTrigs.removeElementAt(tgt);
		}

		if (Level == 2){
			for (int i = 0; i < outV.size(); i++){
				if (outV.elementAt(i).indexOf(otg.StartTrig) >=0)
					outV.setElementAt(OptimizeTrigger(outV.elementAt(i)), i);
			}
		}

		return;
	}

	public static void main(String[] args) {
		OracleOptimizeTriggers tg = new OracleOptimizeTriggers();
		Vector<String> inV = new Vector<String>();
		Vector<String> outV = new Vector<String>();

		Vector<String> inK = new Vector<String>();
		Vector<String> outK = new Vector<String>();

		//String v1 = "DELETEKEY := ' '"; //; DELETEKEY := CONCAT(DELETEKEY, ' ');";
		//v1=v1.replaceAll("DELETEKEY := ' '", "sf");
		//v1.replaceAll("DELETEKEY := ' '; DELETEKEY := CONCAT(DELETEKEY, ' ');", "DELETEKEY := ' ';");
		//System.out.println(""+v1);

		//		
		//		for (int i = 0; i < sampleqrys.length; i++)
		//		{
		//			String qry = "check proc COSARRetVal := KOSARTriggerDeleteCall('RAYS', KeyToDelete, 0); END;";
		//			System.out.println("Index of comment is "+ qry.indexOf("/*, DE"));
		//			//qry=qry.replaceAll("/[*], DELETEKEY IN OUT CLOB[*]/", ", DELETEKEY IN OUT CLOB");
		//			qry = qry.replaceAll("COSARRetVal := KOSARTriggerDeleteCall[(]'RAYS', KeyToDelete, 0[)];", "DeleteKey := CONCAT(DeleteKey, CONCAT(' ', KeyToDelete));");
		//			System.out.println(qry);
		//		}

		//		int DupKeys = 3;
		//		int cnt = sampleqrys.length / DupKeys;
		//		int total = 0;
		//		
		//		for (int i=0; i < DupKeys; i++){
		//			for (int j=0; j<cnt; j++){
		//				total++;
		//				inK.add("SK"+i);
		//			}
		//		}
		//		for (int i = total; i < sampleqrys.length; i++)
		//			inK.add("SK"+(DupKeys-1));

		for (int i = 0; i < 2; i++)
			inK.add("5uc.virtual_clip_id=rv.virtual_clip_idu.user_id=rv.recommended_to");
		for (int i=2; i < sampleqrys.length; i++)
			inK.add("5uc.virtual_clip_id=rv.virtual_clip_idu.user_id=rv.recommended_to");

		System.out.println("\n--------------------------------------------");
		for (int i = 0; i < sampleqrys.length; i++){
			System.out.println(""+i+".  Key="+inK.elementAt(i)+", "+sampleqrys[i]);
			inV.add(sampleqrys[i]);
		}

		System.out.println("\n--------------------------------------------");
		tg.Optimize(inV, outV, 2);
		for (int i=0; i < outV.size(); i++){
			System.out.println(""+outV.elementAt(i));
		}
	}
}
